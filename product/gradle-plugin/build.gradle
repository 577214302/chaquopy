apply plugin: 'groovy'

evaluationDependsOn ":runtime"

configurations {
    runtimeJava
    runtimePython
    runtimeJniLibs
    runtimeLibDynload
}

dependencies {
    compile localGroovy()
    compile gradleApi()

    // This is a library project, so use "+" notation for external dependencies.

    runtimeJava         project(path: ":runtime", configuration: "default")
    runtimePython       project(path: ":runtime", configuration: "python")
    runtimeJniLibs      project(path: ":runtime", configuration: "jniLibs")
    runtimeLibDynload   project(path: ":runtime", configuration: "libDynload")

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

sourceCompatibility = 7
archivesBaseName = "gradle"
sourceSets.main.java.srcDirs += ["../buildSrc/src/main/java"]

processResources {
    // Configurations passed directly to `from` are depended on automatically.
    dependsOn configurations.runtimeJniLibs, configurations.runtimeLibDynload
    doFirst { delete destinationDir }
    into("com/chaquo/python/runtime") {
        from(configurations.runtimeJava)
        from(configurations.runtimePython)
        into("jniLibs") {
            for (file in configurations.runtimeJniLibs) {
                from(file) { into "${file.parentFile.name}" }           // parent dir name is ABI
            }
        }
        into("lib-dynload") {
            for (file in configurations.runtimeLibDynload) {
                from(file) { into "${file.parentFile.name}/java" }      // "
            }
        }
    }
}

task("integrationTest", type: Exec, group: "verification") {
    dependsOn assemble
    workingDir "$projectDir/src/test/integration"
    executable "python"
    args "-m", "unittest"
    if (project.hasProperty("testPythonArgs")) {
        args project.testPythonArgs.split(" ")
    } else {
        args "discover", "-v", "--failfast"
    }
}