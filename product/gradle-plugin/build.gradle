apply plugin: 'groovy'
apply plugin: 'maven-publish'

evaluationDependsOn ":runtime"

configurations {
    runtimeJava         // There's probably a way to avoid this indirection, but when I tried
    runtimePython       // project(":runtime).configurations.whatever, it always came back
    runtimeJniLibs      // empty, even when contained within doLast {}.
    runtimeLibDynload
}

dependencies {
    compile localGroovy()
    compile gradleApi()

    // I experimented with various notations for making this a *minimum* version, but none of them
    // worked with this 1-level version number format. Anyway, Gradle's default version conflict
    // resolution strategy is to use the newest version, which will have the same effect.
    compile "org.json:json:20160810"

    runtimeJava         project(path: ":runtime", configuration: "chaquopyJava")
    runtimePython       project(path: ":runtime", configuration: "chaquopyPython")
    runtimeJniLibs      project(path: ":runtime", configuration: "jniLibs")
    runtimeLibDynload   project(path: ":runtime", configuration: "libDynload")

    testCompile "junit:junit:4.12"
}

sourceCompatibility = 7
sourceSets.main.java.srcDirs += ["../buildSrc/src/main/java"]

task("zipBuildPackages", type: Zip) {
    destinationDir file("$buildDir/tmp/$name")
    archiveName "build-packages.zip"
    from "src/main/python"
    exclude "**/*.pyc"
}

processResources {
    // Configurations passed directly to `from` are depended on automatically.
    dependsOn configurations.runtimeJniLibs, configurations.runtimeLibDynload
    doFirst { delete destinationDir }
    into("com/chaquo/python") {
        into("runtime") {
            from(configurations.runtimeJava)
            from(configurations.runtimePython)

            into("jniLibs") {
                for (file in configurations.runtimeJniLibs) {
                    from(file) {
                        into "$file.parentFile.name"
                    }
                }
            }
            into("lib-dynload") {
                for (file in configurations.runtimeLibDynload) {
                    from(file) {
                        into "$file.parentFile.name/java"
                    }
                }
            }
        }
        into("gradle") {
            from zipBuildPackages
        }
    }
}

Task testTask(String name, Closure closure) {
    def version = "3.6"
    def t = task(name, "type": Exec, "group": "verification") {
        if (System.properties['os.name'].toLowerCase().contains('windows')) {
            executable "py"
            args "-$version"
        } else {
            executable("python$version")
        }
        args "-m", "unittest"
        if (project.hasProperty("testPythonArgs")) {
            args project.testPythonArgs.split(" ")
        } else {
            args "discover", "-v"
        }
    }
    closure.delegate = t
    closure()
    return t
}

testTask("testPython") {
    workingDir "$projectDir/src/test/python"
}
check.dependsOn(testPython)

/** @param version Android Gradle plugin version (corresponds to directory
 *  test/integration/data/base-$version) */
Task testIntegrationTask(String version) {
    return testTask("testIntegration-$version") {
        dependsOn assemble
        workingDir "$projectDir/src/test/integration"
        environment "AGP_VERSION", version
    }
}
task("testIntegration", "group": "verification")
testIntegration.dependsOn(testIntegrationTask("3.0"))
testIntegration.dependsOn(testIntegrationTask("3.1"))
testIntegration.dependsOn(testIntegrationTask("3.2"))
check.dependsOn(testIntegration)

group = "com.chaquo.python"
version = file("../../VERSION.txt").text.trim()

jar {
    manifest {
        // Enables getClass().getPackage().getImplementationVersion().
        attributes 'Implementation-Version': version
    }
}

publishing {
    publications {
        gradle(MavenPublication) {
            from components.java
            artifactId = "gradle"
        }
    }
    repositories {
        maven {
            url = "../../maven"
        }
    }
}