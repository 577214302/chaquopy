apply plugin: 'groovy'

evaluationDependsOn ":runtime"

configurations {
    runtimeJava
    runtimePython
    runtimeJniLibs
    runtimeLibDynload
}

dependencies {
    compile localGroovy()
    compile gradleApi()

    // This is a library project, so use "+" notation for external dependencies.

    runtimeJava         project(path: ":runtime", configuration: "chaquopyJava")
    runtimePython       project(path: ":runtime", configuration: "chaquopyPython")
    runtimeJniLibs      project(path: ":runtime", configuration: "jniLibs")
    runtimeLibDynload   project(path: ":runtime", configuration: "libDynload")

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

sourceCompatibility = 7
archivesBaseName = "gradle"
sourceSets.main.java.srcDirs += ["../buildSrc/src/main/java"]

task("zipBuildPackages", type: Zip) {
    destinationDir file("$buildDir/tmp/$name")
    archiveName "build-packages.zip"
    from "src/main/python"
    exclude "**/*.pyc"
}

processResources {
    // Configurations passed directly to `from` are depended on automatically.
    dependsOn configurations.runtimeJniLibs, configurations.runtimeLibDynload
    doFirst { delete destinationDir }
    into("com/chaquo/python") {
        into("runtime") {
            from(configurations.runtimeJava)
            from(configurations.runtimePython)
            into("jniLibs") {
                for (file in configurations.runtimeJniLibs) {
                    from(file) { into "${file.parentFile.name}" }       // parent dir name is ABI

                }
            }
            into("lib-dynload") {
                for (file in configurations.runtimeLibDynload) {
                    from(file) { into "${file.parentFile.name}/java" }  // "
                }
            }
        }
        into("gradle") {
            from zipBuildPackages
        }
    }
}

Task testPythonTask(String name, Closure closure) {
    def t = task(name, closure, "type": Exec, "group": "verification")
    t.configure {
        executable "python2"
        args "-m", "unittest"
        if (project.hasProperty("testPythonArgs")) {
            args project.testPythonArgs.split(" ")
        } else {
            args "discover", "-v"
        }
    }
    return t
}

testPythonTask("testPython") {
    workingDir "$projectDir/src/test/python"
}
check.dependsOn(testPython)

/** @param version Android Gradle plugin version (corresponds to directory
 *  test/integration/data/base-$version) */
Task testIntegrationTask(String version) {
    return testPythonTask("testIntegration-$version") {
        dependsOn assemble
        workingDir "$projectDir/src/test/integration"
        environment "AGP_VERSION", version
    }
}
task("testIntegration", "group": "verification")
testIntegration.dependsOn(testIntegrationTask("2.2"))
testIntegration.dependsOn(testIntegrationTask("2.3"))
testIntegration.dependsOn(testIntegrationTask("3.0"))
check.dependsOn(testIntegration)
