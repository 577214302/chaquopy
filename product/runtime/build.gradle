apply plugin: 'java'
apply plugin: 'ch.raffael.pegdown-doclet'

import com.chaquo.python.Common;


configurations {
    python
    jniLibs
    libDynload
}


sourceSets.main.java.srcDirs += ["../buildSrc/src/main/java"]
sourceCompatibility = 7

// The Gradle plugin is already versioned, so make our filename within the plugin consistent.
archivesBaseName = "chaquopy_java"
jar {
    version = null
}


task("zipPython", type: Zip, group: "build") {
    from fileTree("src/main/python") { include "**/*.py" }
    destinationDir buildDir
    archiveName "chaquopy.zip"
}
artifacts { python zipPython }


/* My attempts to use Cygwin were not successful (see commit message of 2017-04-20), so there are two
options for working on Windows:

Use the official Python Windows build, in which case you must use the appropriate Microsoft compiler
(https://wiki.python.org/moin/WindowsCompilers), because:
* Native modules must be linked against a C library compatible with the one the Python interpreter
  uses (https://bugs.python.org/issue4709#msg243605).
* The supplied C headers depend on _MSC_VER and possibly other #defines not set by any other
  compiler.

Or (as this file currently does) use MSYS2, making sure to also use their Pacman packages of pip and
setuptools and never install them from PyPI, because the standard versions assume that if you're on
Windows you must be using the Microsoft compiler. For the MSYS2 compiler to be found by cmake,
msys64/mingw64/bin should be on the PATH.

In both cases, interactive use of Python requires either using a Windows console window, or the
winpty program in mintty. And for the Python and Cython executables to be found by their Gradle
tasks, their directories must be on the PATH. */


// Currently the oldest version included in the NDK. The corresponding platform JAR should be
// manually downloaded using the SDK Manager.
final def API_LEVEL = 9

// The following properties file should be created manually.
def localProps = new Properties()
localProps.load(project.rootProject.file('local.properties').newDataInputStream())
def sdkDir = localProps.getProperty('sdk.dir')
def ndkDir = localProps.getProperty('ndk.dir')
def crystaxDir = localProps.getProperty('crystax.dir')
def mingwDir = localProps.getProperty('mingw.dir')  // Windows only

def javaHome = System.getenv("JAVA_HOME")
def windowsHost = System.properties['os.name'].toLowerCase().contains('windows')
def EXE_SUFFIX = windowsHost ? ".exe" : ""
def PATH_SEPARATOR = windowsHost ? ";" : ":"


def cythonTask = {Map taskArgs, String name, Closure closure ->
    taskArgs["type"] = Exec
    def t = task(taskArgs, name, closure)
    t.configure {
        def pyxFiles = inputs.files.findAll { it.name.endsWith(".pyx") }
        assert(pyxFiles.size() == 1)
        def inFile = pyxFiles.get(0)
        def stem = inFile.name.substring(0, inFile.name.length() - ".pyx".length())
        def outStem = "$buildDir/cython/$stem"
        def outFile = "${outStem}.c"
        outputs.file outFile
        executable "cython"
        args "-Wextra", "-Werror", inFile, "-o", outFile
    }
    return t
}

cythonTask("cythonPython", group: "build") {
    inputs.files fileTree("$projectDir/src/main/python/java") {
        include "*.pyx", "*.pxi", "*.pxd"
    }
}
cythonTask("cythonJava", group: "build") {
    inputs.files "$projectDir/src/main/python/chaquopy_java.pyx"
    inputs.files fileTree("$projectDir/src/main/python/java") { include "*.pxd" }
    doLast {
        // All functions called directly by the JVM must be declared JNICALL JNIEXPORT. JNIEXPORT
        // should be equivalent to Cython's "cdef public", but JNICALL does make a difference on
        // some platforms including x86. So alter the generated C code to add it.
        def cFile = outputs.files.getSingleFile()
        def tmpFile = new File("${cFile}.tmp")
        def replacementCount = 0
        tmpFile.withWriter { writer ->
            for (inLine in cFile.readLines()) {
                def outLine = inLine.replaceAll \
                    (/__PYX_EXTERN_C DL_EXPORT\((.+?)\)/,
                     '/* cythonJava altered */ __PYX_EXTERN_C JNIEXPORT $1 JNICALL')
                if (! outLine.equals(inLine)) replacementCount += 1
                writer.write(outLine + "\n")
            }
        }
        if (replacementCount == 0) {
            throw new GradleException("No exports found: has Cython output format changed?")
        }
        if (! (cFile.delete() && tmpFile.renameTo(cFile))) {
            throw new GradleException("Failed to replace $cFile")
        }
    }
}
task("cython", group: "build") {
    dependsOn cythonPython, cythonJava
}


def sdkCmakeParentDir = new File(sdkDir, "cmake")
def sdkCmakeDir = "$sdkCmakeParentDir/${sdkCmakeParentDir.list()[0]}"

def cmakeBuildAnchor = task("cmakeBuild", group: "build")
assemble.dependsOn(cmakeBuildAnchor)

for (pyFullVersion in Common.PYTHON_VERSIONS) {
    def pyVersion = pyFullVersion.substring(0, pyFullVersion.lastIndexOf("."))
    for (abi in ["host"] + Common.ABIS) {
        def pyPlusVersion = "python$pyVersion${pyVersion.startsWith("3") ? "m" : ""}"   // See PEP 3149

        // Linux defaults
        def pyLibPrefix = ""
        def pyLibSuffix = ".so"
        def javaLibPrefix = "lib"
        def javaLibSuffix = ".so"

        def cmakeBuildSubdir = "$buildDir/cmake/$pyVersion/$abi"
        def cmake = task("cmake-$pyVersion-$abi", type: Exec, group: "build") {
            dependsOn cython
            inputs.files "CMakeLists.txt"
            outputs.files "$cmakeBuildSubdir/build.ninja", "$cmakeBuildSubdir/rules.ninja",
                          "$cmakeBuildSubdir/CMakeCache.txt"
            doFirst {
                mkdir cmakeBuildSubdir
                delete(outputs.files)   // Otherwise changes to args below won't take effect
            }
            workingDir cmakeBuildSubdir
            executable "$sdkCmakeDir/bin/cmake"
            args "-GNinja", "-DCMAKE_MAKE_PROGRAM=$sdkCmakeDir/bin/ninja",
                 "-DCMAKE_BUILD_TYPE=Debug",  // TODO #5152
                 "-DCHAQUOPY_LIBS=$pyPlusVersion"

            if (abi == "host") {
                if (windowsHost) {
                    pyLibSuffix = ".pyd"
                    javaLibPrefix = ""
                    javaLibSuffix = ".dll"
                    args "-DCHAQUOPY_INCLUDE_DIRS=$mingwDir/include/$pyPlusVersion;" +
                                                 "$javaHome/include;$javaHome/include/win32"
                } else {
                    // TODO untested
                    args "-DCHAQUOPY_INCLUDE_DIRS=/usr/include/$pyPlusVersion"
                }
            } else {
                def pyDir = "$crystaxDir/sources/python/$pyVersion"
                args "-DCMAKE_TOOLCHAIN_FILE=$ndkDir/build/cmake/android.toolchain.cmake",
                     "-DANDROID_NDK=$ndkDir", "-DANDROID_STL=system",
                     "-DANDROID_NATIVE_API_LEVEL=$API_LEVEL", "-DANDROID_ABI=$abi",
                     "-DCHAQUOPY_INCLUDE_DIRS=$pyDir/include/python",
                     "-DCHAQUOPY_LIB_DIRS=$pyDir/libs/$abi"
            }
            args "-DPY_LIB_PREFIX=$pyLibPrefix", "-DPY_LIB_SUFFIX=$pyLibSuffix",
                 "-DJAVA_LIB_PREFIX=$javaLibPrefix", "-DJAVA_LIB_SUFFIX=$javaLibSuffix",
                 "$projectDir"
        }

        def cmakeBuild = task("cmakeBuild-$pyVersion-$abi", type: Exec, group: "build") {
            // No inputs or outputs: the command itself determines whether it's up to date.
            dependsOn cmake
            executable "$sdkCmakeDir/bin/cmake"
            args "--build", cmakeBuildSubdir
        }
        cmakeBuildAnchor.dependsOn(cmakeBuild)
        if (abi != "host") {
            project.artifacts {
                jniLibs    (file("$cmakeBuildSubdir/libchaquopy_java.so")) { builtBy cmakeBuild }
                libDynload (file("$cmakeBuildSubdir/chaquopy.so"))         { builtBy cmakeBuild }
            }
        }

        if (abi == "host") {
            def mainPythonDir = "$projectDir/src/main/python"
            def testPythonDir = "$projectDir/src/test/python"
            def setupPythonPath = task("setupPythonPath-$pyVersion", group: "verification") {
                dependsOn cmakeBuild
                doFirst {
                    copy {
                        into mainPythonDir
                        from(cmakeBuildSubdir) {
                            include "chaquopy${pyLibSuffix}"
                            into "java"
                        }
                    }
                }
            }

            def testCommonConfig = {
                dependsOn setupPythonPath, "compileTestJava"
                environment "CLASSPATH", "$compileJava.destinationDir;$compileTestJava.destinationDir"
                environment "PATH", "${System.getenv("PATH")}$PATH_SEPARATOR$cmakeBuildSubdir"
                environment "PYTHONHOME", windowsHost ? mingwDir : "/usr"
                environment "PYTHONPATH", "$mainPythonDir$PATH_SEPARATOR$testPythonDir"
            }

            def testPython = task("testPython-$pyVersion", type: Exec, group: "verification") {
                workingDir "$projectDir/src/test/python"
                executable "$pyPlusVersion$EXE_SUFFIX"   // filenames with dots require the ".exe"
                args "-m", "unittest"
                if (project.hasProperty("testPythonArgs")) {
                    args project.testPythonArgs.split(" ")
                } else {
                    args "discover"
                }
            }
            testPython.configure(testCommonConfig)
            check.dependsOn(testPython)

            test {
                outputs.upToDateWhen { false }
                testLogging {
                    exceptionFormat = 'full'
                    showStandardStreams = true
                }
            }
            test.configure(testCommonConfig)
        }
    }
}

javadoc {
    outputs.upToDateWhen { false }
    title "Chaquopy Java API"
    executable "$javaHome/bin/javadoc$EXE_SUFFIX"   // Prevents some irrelevant warnings
    options {
        addBooleanOption("Xdoclint:all,-missing", true)  // Doesn't seem to have any effect within Gradle
        addStringOption("sourcepath", "$javaHome/src.zip")  // For inherited documentation
        addBooleanOption("nodeprecated", true)
        addStringOption("noqualifier", "all")
        addStringOption("link", "https://developer.android.com/reference/")
        addStringOption("stylesheetfile", "$projectDir/javadoc-chaquo.css")
    }
}

dependencies {
    compileOnly files("$sdkDir/platforms/android-$API_LEVEL/android.jar")

    // This is a library project, so use "+" notation for external dependencies.
    // However, avoid adding dependencies, because they'll inflate the size of the users' APKs.

    testCompile 'junit:junit:4.12'
}
