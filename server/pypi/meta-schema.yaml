# A subset of conda syntax
# (https://conda.io/docs/user-guide/tasks/build-packages/define-metadata.html).

type: object
required: [package]

properties:

  package:
    type: object
    required: [name, version]
    properties:
      name:             # Must be in its original form, as used in sdist filenames. However, the
        type: string    # containing directory name must be in PyPI normalized form (PEP 503).
      version:
        type: [string, number]
    additionalProperties: false

  source:
    default: pypi
    oneOf:
      - type: "null"
      - type: string
        const: pypi
      - type: object
        required: [url]
        properties:
          url:
            type: string
        additionalProperties: false
      - type: object
        required: [git_url, git_rev]
        properties:
          git_url:
            type: string
          git_rev:
            type: [string, number]
        additionalProperties: false

  build:
    type: object
    default: {}
    properties:
      number:           # Used as the wheel build tag.
        type: integer
        default: 0
    additionalProperties: false

  # Normal requirements must be in the form `<package> <version>`. The following special
  # requirement names are also recognized:
  #
  # * A `host` requirement of `python` indicates that this is a Python package. (This is
  #   implied if `source` is `pypi` or unspecified.) Python includes and libraries will be
  #   added to the CFLAGS and LDFLAGS, and the wheel build tag will be set accordingly.
  #
  # * A `host` requirement of `openssl` or `sqlite` will add that library to CFLAGS and
  #   LDFLAGS.
  #
  # * A `build` requirement of `cmake` indicates that CMake is used in the build. A
  #   `chaquopy.toolchain.cmake` file will be generated in the build directory for use with
  #   `-DCMAKE_TOOLCHAIN_FILE`.
  requirements:
    type: object
    default: {}
    properties:
      build:            # Requirements which must be installed in the build environment.
        type: array
        default: []
        items:
          type: string
      host:             # Requirements which must be available at runtime. A compatible wheel
        type: array     # file for the given version must exist in packages/<package>/dist, and
        default: []     # will be extracted into $SRC_DIR/../requirements before the build is run.
        items:          # A requirement specification for >= this version will be added to the
          type: string  # final wheel.
    additionalProperties: false

additionalProperties: false
