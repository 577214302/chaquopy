diff -ur src-original/setup.py src/setup.py
--- src-original/setup.py	2018-06-01 23:53:55.000000000 +0000
+++ src/setup.py	2018-11-30 23:19:56.985643589 +0000
@@ -40,14 +40,7 @@
 CARES_INCLUDE = (
     os.path.join('third_party', 'cares'),
     os.path.join('third_party', 'cares', 'cares'),)
-if 'darwin' in sys.platform:
-  CARES_INCLUDE += (os.path.join('third_party', 'cares', 'config_darwin'),)
-if 'freebsd' in sys.platform:
-  CARES_INCLUDE += (os.path.join('third_party', 'cares', 'config_freebsd'),)
-if 'linux' in sys.platform:
-  CARES_INCLUDE += (os.path.join('third_party', 'cares', 'config_linux'),)
-if 'openbsd' in sys.platform:
-  CARES_INCLUDE += (os.path.join('third_party', 'cares', 'config_openbsd'),)
+CARES_INCLUDE += (os.path.join('third_party', 'cares', 'config_android'),)  # Chaquopy
 ADDRESS_SORTING_INCLUDE = (os.path.join('third_party', 'address_sorting', 'include'),)
 README = os.path.join(PYTHON_STEM, 'README.rst')
 
@@ -104,7 +97,8 @@
 EXTRA_ENV_COMPILE_ARGS = os.environ.get('GRPC_PYTHON_CFLAGS', None)
 EXTRA_ENV_LINK_ARGS = os.environ.get('GRPC_PYTHON_LDFLAGS', None)
 if EXTRA_ENV_COMPILE_ARGS is None:
-  EXTRA_ENV_COMPILE_ARGS = ' -std=c++11'
+  # Chaquopy: removed `-std=c++11`, which clang doesn't allow with C files.
+  EXTRA_ENV_COMPILE_ARGS = ''
   if 'win32' in sys.platform and sys.version_info < (3, 5):
     EXTRA_ENV_COMPILE_ARGS += ' -D_hypot=hypot'
     # We use define flags here and don't directly add to DEFINE_MACROS below to
@@ -116,24 +110,17 @@
     else:
       EXTRA_ENV_COMPILE_ARGS += ' -D_ftime=_ftime64 -D_timeb=__timeb64'
   elif "linux" in sys.platform:
-    EXTRA_ENV_COMPILE_ARGS += ' -std=gnu99 -fvisibility=hidden -fno-wrapv -fno-exceptions'
+    # Chaquopy: removed `-std=gnu99`, which clang doesn't allow with C++ files.
+    EXTRA_ENV_COMPILE_ARGS += ' -fvisibility=hidden -fno-wrapv -fno-exceptions'
   elif "darwin" in sys.platform:
     EXTRA_ENV_COMPILE_ARGS += ' -fvisibility=hidden -fno-wrapv -fno-exceptions'
 EXTRA_ENV_COMPILE_ARGS += ' -DPB_FIELD_16BIT'
 
 if EXTRA_ENV_LINK_ARGS is None:
   EXTRA_ENV_LINK_ARGS = ''
-  if "linux" in sys.platform or "darwin" in sys.platform:
-    EXTRA_ENV_LINK_ARGS += ' -lpthread'
-  elif "win32" in sys.platform and sys.version_info < (3, 5):
-    msvcr = cygwinccompiler.get_msvcr()[0]
-    # TODO(atash) sift through the GCC specs to see if libstdc++ can have any
-    # influence on the linkage outcome on MinGW for non-C++ programs.
-    EXTRA_ENV_LINK_ARGS += (
-        ' -static-libgcc -static-libstdc++ -mcrtdll={msvcr} '
-        '-static'.format(msvcr=msvcr))
-  if "linux" in sys.platform:
-    EXTRA_ENV_LINK_ARGS += ' -Wl,-wrap,memcpy  -static-libgcc'
+  # Chaquopy: these are the arguments for Linux, minus -lpthread, which is part of libc on
+  # Android.
+  EXTRA_ENV_LINK_ARGS += ' -Wl,-wrap,memcpy  -static-libgcc'
 
 EXTRA_COMPILE_ARGS = shlex.split(EXTRA_ENV_COMPILE_ARGS)
 EXTRA_LINK_ARGS = shlex.split(EXTRA_ENV_LINK_ARGS)
@@ -153,12 +140,7 @@
     CARES_INCLUDE + ADDRESS_SORTING_INCLUDE)
 
 EXTENSION_LIBRARIES = ()
-if "linux" in sys.platform:
-  EXTENSION_LIBRARIES += ('rt',)
-if not "win32" in sys.platform:
-  EXTENSION_LIBRARIES += ('m',)
-if "win32" in sys.platform:
-  EXTENSION_LIBRARIES += ('advapi32', 'ws2_32',)
+EXTENSION_LIBRARIES += ('log',)  # Chaquopy
 
 DEFINE_MACROS = (
     ('OPENSSL_NO_ASM', 1), ('_WIN32_WINNT', 0x600),
@@ -239,6 +221,9 @@
 
 INSTALL_REQUIRES = (
     'six>=1.5.2',
+
+    # Chaquopy: pkg_resources is imported by src/python/grpcio/grpc/_cython/cygrpc.pyx.
+    'setuptools'
 )
 
 if not PY3:
--- src-original/src/core/lib/gpr/wrap_memcpy.cc        2018-06-01 23:53:55.000000000 +0000
+++ src/src/core/lib/gpr/wrap_memcpy.cc 2019-03-07 19:58:46.900378870 +0000
@@ -28,7 +28,8 @@

 extern "C" {
 #ifdef __linux__
-#if defined(__x86_64__) && !defined(GPR_MUSL_LIBC_COMPAT)
+// Chaquopy disabled: build succeeds, but function hangs at runtime.
+#if 0 && defined(__x86_64__) && !defined(GPR_MUSL_LIBC_COMPAT)
 __asm__(".symver memcpy,memcpy@GLIBC_2.2.5");
 void* __wrap_memcpy(void* destination, const void* source, size_t num) {
   return memcpy(destination, source, num);
diff -ur src-original/third_party/cares/cares/ares_init.c src/third_party/cares/cares/ares_init.c
--- src-original/third_party/cares/cares/ares_init.c	2018-06-01 23:53:57.000000000 +0000
+++ src/third_party/cares/cares/ares_init.c	2018-10-17 19:02:36.339520322 +0000
@@ -1537,8 +1537,10 @@
   unsigned int i;
   char propname[PROP_NAME_MAX];
   char propvalue[PROP_VALUE_MAX]="";
-
   for (i = 1; i <= MAX_DNS_PROPERTIES; i++) {
+  /* Chaquopy: __system_property_get was removed in 64-bit ABIs
+     (https://stackoverflow.com/a/28416743).
+
     snprintf(propname, sizeof(propname), "%s%u", DNS_PROP_NAME_PREFIX, i);
     if (__system_property_get(propname, propvalue) < 1) {
       status = ARES_EOF;
@@ -1547,6 +1549,7 @@
     status = config_nameserver(&servers, &nservers, propvalue);
     if (status != ARES_SUCCESS)
       break;
+  */
     status = ARES_EOF;
   }
 #elif defined(CARES_USE_LIBRESOLV)
diff -ur src-original/third_party/cares/config_android/ares_config.h src/third_party/cares/config_android/ares_config.h
--- src-original/third_party/cares/config_android/ares_config.h	2018-06-01 23:53:55.000000000 +0000
+++ src/third_party/cares/config_android/ares_config.h	2018-11-30 23:35:50.419146489 +0000
@@ -52,7 +52,8 @@
 #define HAVE_ARPA_INET_H
 
 /* Define to 1 if you have the <arpa/nameser_compat.h> header file. */
-#define HAVE_ARPA_NAMESER_COMPAT_H
+/* Chaquopy: Crystax doesn't have this file until API level 21. */
+/* #undef HAVE_ARPA_NAMESER_COMPAT_H */
 
 /* Define to 1 if you have the <arpa/nameser.h> header file. */
 #define HAVE_ARPA_NAMESER_H
@@ -442,7 +443,8 @@
   /* 'FD_ZERO' doesn't use __fdelt_chk, no need to redefine. */
 
   #ifdef __FDS_BITS
-    #define GRPC_CARES_FDS_BITS(set) __FDS_BITS(set)
+    /* Chaquopy: added first argument to __FDS_BITS. */
+    #define GRPC_CARES_FDS_BITS(set) __FDS_BITS(fd_set*,set)
   #else
     #define GRPC_CARES_FDS_BITS(set) ((set)->fds_bits)
   #endif
