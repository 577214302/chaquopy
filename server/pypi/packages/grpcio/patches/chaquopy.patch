diff -ur src-original/setup.py src/setup.py
--- src-original/setup.py       2019-12-18 01:59:03.000000000 +0000
+++ src/setup.py        2020-01-22 11:30:11.689436404 +0000
@@ -47,7 +47,7 @@
 if 'freebsd' in sys.platform:
   CARES_INCLUDE += (os.path.join('third_party', 'cares', 'config_freebsd'),)
 if 'linux' in sys.platform:
-  CARES_INCLUDE += (os.path.join('third_party', 'cares', 'config_linux'),)
+  CARES_INCLUDE += (os.path.join('third_party', 'cares', 'config_android'),)  # Chaquopy
 if 'openbsd' in sys.platform:
   CARES_INCLUDE += (os.path.join('third_party', 'cares', 'config_openbsd'),)
 SSL_INCLUDE = (os.path.join('third_party', 'boringssl', 'include'),)
@@ -162,7 +162,8 @@
 EXTRA_ENV_COMPILE_ARGS = os.environ.get('GRPC_PYTHON_CFLAGS', None)
 EXTRA_ENV_LINK_ARGS = os.environ.get('GRPC_PYTHON_LDFLAGS', None)
 if EXTRA_ENV_COMPILE_ARGS is None:
-  EXTRA_ENV_COMPILE_ARGS = ' -std=c++11'
+  # Chaquopy: removed `-std=c++11`, which clang doesn't allow with C files.
+  EXTRA_ENV_COMPILE_ARGS = ''
   if 'win32' in sys.platform:
     if sys.version_info < (3, 5):
       EXTRA_ENV_COMPILE_ARGS += ' -D_hypot=hypot'
@@ -179,7 +180,8 @@
       # available dynamically
       EXTRA_ENV_COMPILE_ARGS += ' /MT'
   elif "linux" in sys.platform:
-    EXTRA_ENV_COMPILE_ARGS += ' -std=gnu99 -fvisibility=hidden -fno-wrapv -fno-exceptions'
+    # Chaquopy: removed `-std=gnu99`, which clang doesn't allow with C++ files.
+    EXTRA_ENV_COMPILE_ARGS += ' -fvisibility=hidden -fno-wrapv -fno-exceptions'
   elif "darwin" in sys.platform:
     EXTRA_ENV_COMPILE_ARGS += ' -stdlib=libc++ -fvisibility=hidden -fno-wrapv -fno-exceptions'
 
@@ -209,6 +211,7 @@
 CYTHON_HELPER_C_FILES = ()
 
 CORE_C_FILES = tuple(grpc_core_dependencies.CORE_SOURCE_FILES)
+CORE_C_FILES += ("third_party/cares/cares/ares_android.c",)  # Chaquopy
 if "win32" in sys.platform:
   CORE_C_FILES = filter(lambda x: 'third_party/cares' not in x, CORE_C_FILES)
 
@@ -237,7 +240,7 @@
 
 EXTENSION_LIBRARIES = ()
 if "linux" in sys.platform:
-  EXTENSION_LIBRARIES += ('rt',)
+  EXTENSION_LIBRARIES += ('rt', 'log', 'dl')  # Chaquopy: added 'log' and 'dl'
 if not "win32" in sys.platform:
   EXTENSION_LIBRARIES += ('m',)
 if "win32" in sys.platform:
--- src-original/src/core/lib/gpr/wrap_memcpy.cc        2018-06-01 23:53:55.000000000 +0000
+++ src/src/core/lib/gpr/wrap_memcpy.cc 2019-03-07 19:58:46.900378870 +0000
@@ -28,7 +28,8 @@
 
 extern "C" {
 #ifdef __linux__
-#if defined(__x86_64__) && !defined(GPR_MUSL_LIBC_COMPAT)
+// Chaquopy disabled: build succeeds, but function hangs at runtime.
+#if 0 && defined(__x86_64__) && !defined(GPR_MUSL_LIBC_COMPAT)
 __asm__(".symver memcpy,memcpy@GLIBC_2.2.5");
 void* __wrap_memcpy(void* destination, const void* source, size_t num) {
   return memcpy(destination, source, num);
diff -ur src-original/third_party/cares/config_android/ares_config.h src/third_party/cares/config_android/ares_config.h
--- src-original/third_party/cares/config_android/ares_config.h	2018-06-01 23:53:55.000000000 +0000
+++ src/third_party/cares/config_android/ares_config.h	2018-11-30 23:35:50.419146489 +0000
@@ -442,7 +443,8 @@
   /* 'FD_ZERO' doesn't use __fdelt_chk, no need to redefine. */
 
   #ifdef __FDS_BITS
-    #define GRPC_CARES_FDS_BITS(set) __FDS_BITS(set)
+    /* Chaquopy: added first argument to __FDS_BITS. */
+    #define GRPC_CARES_FDS_BITS(set) __FDS_BITS(fd_set*,set)
   #else
     #define GRPC_CARES_FDS_BITS(set) ((set)->fds_bits)
   #endif
