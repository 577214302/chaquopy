diff -ur requirements-original/numpy/distutils/fcompiler/__init__.py requirements/numpy/distutils/fcompiler/__init__.py
--- requirements-original/numpy/distutils/fcompiler/__init__.py	2018-02-28 17:03:26.000000000 +0000
+++ requirements/numpy/distutils/fcompiler/__init__.py	2018-04-22 17:09:52.812356493 +0000
@@ -333,9 +333,14 @@
                 unique_possibles.append(e)
 
             for exe in unique_possibles:
-                fc_exe = cached_find_executable(exe)
+                # Chaquopy: handle multi-word executables like LDSHARED="path/to/gcc -shared"
+                exe_split = split_quoted(exe)
+                fc_exe = cached_find_executable(exe_split[0])
                 if fc_exe:
                     cmd[0] = fc_exe
+                    for arg in exe_split[1:]:
+                        if arg not in cmd:
+                            cmd.append(arg)
                     return fc_exe
             self.set_command(exe_key, None)
             return None
diff -ur requirements-original/numpy/distutils/npy_pkg_config.py requirements/numpy/distutils/npy_pkg_config.py
--- requirements-original/numpy/distutils/npy_pkg_config.py	2018-02-28 17:03:26.000000000 +0000
+++ requirements/numpy/distutils/npy_pkg_config.py	2018-04-22 13:36:27.265045865 +0000
@@ -312,15 +312,14 @@
 
     # FIXME: document this. If pkgname is defined in the variables section, and
     # there is no pkgdir variable defined, pkgdir is automatically defined to
-    # the path of pkgname. This requires the package to be imported to work
+    # the path of pkgname.
+    # Chaquopy: edited to use find_module so the module doesn't have to be imported.
     if not 'pkgdir' in vars and "pkgname" in vars:
+        import imp
         pkgname = vars["pkgname"]
-        if not pkgname in sys.modules:
-            raise ValueError("You should import %s to get information on %s" %
-                             (pkgname, meta["name"]))
-
-        mod = sys.modules[pkgname]
-        vars["pkgdir"] = _escape_backslash(os.path.dirname(mod.__file__))
+        pkgs = pkgname.split(".")
+        _, top_dir, _ = imp.find_module(pkgs[0])
+        vars["pkgdir"] = _escape_backslash(os.path.join(top_dir, *pkgs[1:]))
 
     return LibraryInfo(name=meta["name"], description=meta["description"],
             version=meta["version"], sections=sections, vars=VariableSet(vars))
diff -ur requirements-original/numpy/__init__.py requirements/numpy/__init__.py
--- requirements-original/numpy/__init__.py	2018-02-28 17:03:26.000000000 +0000
+++ requirements/numpy/__init__.py	2018-04-22 16:48:56.253279855 +0000
@@ -121,6 +121,15 @@
 
 if __NUMPY_SETUP__:
     sys.stderr.write('Running from numpy source directory.\n')
+
+    # Chaquopy: the module namespace was originally empty in this mode, but the following
+    # things are neded by the SciPy build.
+    def get_include():
+        import os
+        return os.path.join(os.path.dirname(__file__), 'core', 'include')
+
+    from .version import version as __version__
+
 else:
     try:
         from numpy.__config__ import show as show_config
