diff -ur src-original/setup.py src/setup.py
--- src-original/setup.py	2019-05-15 09:30:00.000000000 +0000
+++ src/setup.py	2019-06-28 12:08:03.530448656 +0000
@@ -17,6 +17,12 @@
     # Python 2 compat: just to be able to declare that Python >=3.5 is needed.
     import __builtin__ as builtins
 
+# Chaquopy
+os.environ["OPENBLAS"] = os.path.abspath("../requirements/chaquopy/lib")
+sys.path.insert(0, os.path.abspath("../requirements"))  # For numpy.distutils
+builtins.__NUMPY_SETUP__ = True  # Prevent the compiled parts from being imported.
+builtins.__SCIPY_SETUP__ = True  #
+
 # This is a bit (!) hackish: we are setting a global variable so that the
 # main sklearn __init__ can detect if it is being loaded by the setup
 # routine, to avoid attempting to load components that aren't built yet:
@@ -133,6 +139,10 @@
                     e.extra_compile_args += openmp_flag
                     e.extra_link_args += openmp_flag
 
+            # Chaquopy
+            for e in self.extensions:
+                e.libraries += ["atomic"]
+
             build_ext.build_extensions(self)
 
     cmdclass['build_ext'] = build_ext_subclass
--- src-original/sklearn/_build_utils/openmp_helpers.py 2019-12-24 14:59:45.000000000 +0000
+++ src/sklearn/_build_utils/openmp_helpers.py  2020-01-29 16:48:37.412790263 +0000
@@ -70,12 +70,9 @@
         output = compile_test_program(code,
                                       extra_preargs=extra_preargs,
                                       extra_postargs=extra_postargs)
-
-        if 'nthreads=' in output[0]:
-            nthreads = int(output[0].strip().split('=')[1])
-            openmp_supported = len(output) == nthreads
-        else:
-            openmp_supported = False
+        # Chaquopy: removed parsing of output, as compile_test program is patched so it no
+        # longer runs the program.
+        openmp_supported = True
 
     except (CompileError, LinkError, subprocess.CalledProcessError):
         openmp_supported = False
--- src-original/sklearn/_build_utils/pre_build_helpers.py      2019-12-24 14:59:45.000000000 +0000
+++ src/sklearn/_build_utils/pre_build_helpers.py       2020-01-29 16:46:53.489089535 +0000
@@ -48,7 +48,7 @@
 
             # Run test program
             # will raise a CalledProcessError if return code was non-zero
-            output = subprocess.check_output('./test_program')
+            output = b"Chaquopy: not running test program"
             output = output.decode(sys.stdout.encoding or 'utf-8').splitlines()
         except Exception:
             raise
diff -ur src-original/sklearn/utils/_joblib.py src/sklearn/utils/_joblib.py
--- src-original/sklearn/utils/_joblib.py       2019-12-24 14:59:45.000000000 +0000
+++ src/sklearn/utils/_joblib.py        2020-01-29 16:40:45.239967530 +0000
@@ -1,5 +1,14 @@
 import warnings as _warnings
 
+# Chaquopy: workaround for https://github.com/joblib/joblib/issues/825. This will allow the
+# joblib import to complete, but any scikit-learn features which use process-based parallelism
+# will still not work. I'm not sure how widely-used these features are, so I'm not taking any
+# further action on this unless a user reports a problem. If they do, we can advise them to use
+# the `parallel_backend` context manager to use thread-based parallelism instead, and then
+# we'll look into whether there's a way to monkey-patch joblib to do that by default.
+import _multiprocessing
+_multiprocessing.sem_unlink = None
+
 with _warnings.catch_warnings():
     _warnings.simplefilter("ignore")
     # joblib imports may raise DeprecationWarning on certain Python
