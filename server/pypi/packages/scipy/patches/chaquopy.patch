diff -Naur src-original/scipy/__init__.py src/scipy/__init__.py
--- src-original/scipy/__init__.py	2020-11-04 03:24:04.000000000 +0100
+++ src/scipy/__init__.py	2023-08-31 11:07:04.923259522 +0200
@@ -58,56 +58,57 @@
 """
 __all__ = ['test']
 
-from numpy import show_config as show_numpy_config
-if show_numpy_config is None:
-    raise ImportError(
-        "Cannot import SciPy when running from NumPy source directory.")
+# Chaquopy: removed `from numpy import show_config` test
 from numpy import __version__ as __numpy_version__
 
-# Import numpy symbols to scipy name space (DEPRECATED)
-from ._lib.deprecation import _deprecated
-import numpy as _num
-linalg = None
-_msg = ('scipy.{0} is deprecated and will be removed in SciPy 2.0.0, '
-        'use numpy.{0} instead')
-# deprecate callable objects, skipping classes
-for _key in _num.__all__:
-    _fun = getattr(_num, _key)
-    if callable(_fun) and not isinstance(_fun, type):
-        _fun = _deprecated(_msg.format(_key))(_fun)
-    globals()[_key] = _fun
-from numpy.random import rand, randn
-_msg = ('scipy.{0} is deprecated and will be removed in SciPy 2.0.0, '
-        'use numpy.random.{0} instead')
-rand = _deprecated(_msg.format('rand'))(rand)
-randn = _deprecated(_msg.format('randn'))(randn)
-from numpy.fft import fft, ifft
-# fft is especially problematic, so we deprecate it with a shorter window
-fft_msg = ('Using scipy.fft as a function is deprecated and will be '
-           'removed in SciPy 1.5.0, use scipy.fft.fft instead.')
-# for wrapping in scipy.fft.__call__, so the stacklevel is one off from the
-# usual (2)
-_dep_fft = _deprecated(fft_msg, stacklevel=3)(fft)
-fft = _deprecated(fft_msg)(fft)
-ifft = _deprecated('scipy.ifft is deprecated and will be removed in SciPy '
-                   '2.0.0, use scipy.fft.ifft instead')(ifft)
-import numpy.lib.scimath as _sci
-_msg = ('scipy.{0} is deprecated and will be removed in SciPy 2.0.0, '
-        'use numpy.lib.scimath.{0} instead')
-for _key in _sci.__all__:
-    _fun = getattr(_sci, _key)
-    if callable(_fun):
-        _fun = _deprecated(_msg.format(_key))(_fun)
-    globals()[_key] = _fun
-
-__all__ += _num.__all__
-__all__ += ['randn', 'rand', 'fft', 'ifft']
-
-del _num
-# Remove the linalg imported from NumPy so that the scipy.linalg package can be
-# imported.
-del linalg
-__all__.remove('linalg')
+# Chaquopy: don't import numpy during build.
+try:
+    __SCIPY_SETUP__
+except NameError:
+    # Import numpy symbols to scipy name space (DEPRECATED)
+    from ._lib.deprecation import _deprecated
+    import numpy as _num
+    linalg = None
+    _msg = ('scipy.{0} is deprecated and will be removed in SciPy 2.0.0, '
+            'use numpy.{0} instead')
+    # deprecate callable objects, skipping classes
+    for _key in _num.__all__:
+        _fun = getattr(_num, _key)
+        if callable(_fun) and not isinstance(_fun, type):
+            _fun = _deprecated(_msg.format(_key))(_fun)
+        globals()[_key] = _fun
+    from numpy.random import rand, randn
+    _msg = ('scipy.{0} is deprecated and will be removed in SciPy 2.0.0, '
+            'use numpy.random.{0} instead')
+    rand = _deprecated(_msg.format('rand'))(rand)
+    randn = _deprecated(_msg.format('randn'))(randn)
+    from numpy.fft import fft, ifft
+    # fft is especially problematic, so we deprecate it with a shorter window
+    fft_msg = ('Using scipy.fft as a function is deprecated and will be '
+            'removed in SciPy 1.5.0, use scipy.fft.fft instead.')
+    # for wrapping in scipy.fft.__call__, so the stacklevel is one off from the
+    # usual (2)
+    _dep_fft = _deprecated(fft_msg, stacklevel=3)(fft)
+    fft = _deprecated(fft_msg)(fft)
+    ifft = _deprecated('scipy.ifft is deprecated and will be removed in SciPy '
+                    '2.0.0, use scipy.fft.ifft instead')(ifft)
+    import numpy.lib.scimath as _sci
+    _msg = ('scipy.{0} is deprecated and will be removed in SciPy 2.0.0, '
+            'use numpy.lib.scimath.{0} instead')
+    for _key in _sci.__all__:
+        _fun = getattr(_sci, _key)
+        if callable(_fun):
+            _fun = _deprecated(_msg.format(_key))(_fun)
+        globals()[_key] = _fun
+
+    __all__ += _num.__all__
+    __all__ += ['randn', 'rand', 'fft', 'ifft']
+
+    del _num
+    # Remove the linalg imported from NumPy so that the scipy.linalg package can be
+    # imported.
+    del linalg
+    __all__.remove('linalg')
 
 # We first need to detect if we're being called as part of the SciPy
 # setup procedure itself in a reliable manner.
@@ -121,6 +122,11 @@
     import sys as _sys
     _sys.stderr.write('Running from SciPy source directory.\n')
     del _sys
+
+    # Chaquopy: the module namespace was originally empty in this mode, but the following
+    # things are neded by the scikit-learn build.
+    from scipy.version import version as __version__
+
 else:
     try:
         from scipy.__config__ import show as show_config
diff -Naur src-original/scipy/special/utils/makenpz.py src/scipy/special/utils/makenpz.py
--- src-original/scipy/special/utils/makenpz.py	2020-04-10 03:54:04.000000000 +0200
+++ src/scipy/special/utils/makenpz.py	2023-08-31 11:08:00.268591724 +0200
@@ -6,7 +6,8 @@
 """
 
 import os
-import numpy as np
+# Chaquopy: removed `import numpy`: we will "Skip rebuilding if no sources" below, so it's not
+# needed.
 import argparse
 
 from distutils.util import newer
diff -Naur src-original/setup.py src/setup.py
--- src-original/setup.py	2020-11-04 03:26:03.000000000 +0100
+++ src/setup.py	2023-08-31 11:07:28.223822461 +0200
@@ -33,6 +33,21 @@
 import builtins
 
 
+
+# Chaquopy: an OpenBLAS test executable is built without using LDFLAGS, so we have to add
+# --rpath-link here: see note in build-wheel.py.
+with open(os.path.join(os.path.dirname(__file__), "site.cfg"), "w") as site_file:
+    site_file.write("[openblas]\n"
+                    "library_dirs = {reqs_dir}/lib\n"
+                    "include_dirs = {reqs_dir}/include\n"
+                    "extra_link_args = -Wl,-rpath-link,{reqs_dir}/lib\n"
+                    .format(reqs_dir=os.path.abspath("../requirements/chaquopy")))
+
+# Chaquopy added
+sys.path.insert(0, os.path.abspath("../requirements"))  # For numpy.distutils
+builtins.__NUMPY_SETUP__ = True  # Prevent the rest of NumPy from being imported.
+
+
 CLASSIFIERS = """\
 Development Status :: 5 - Production/Stable
 Intended Audience :: Science/Research
@@ -514,7 +529,7 @@
                           else [])
 
     install_requires = build_requires
-    setup_requires = build_requires + ['pybind11>=2.4.3']
+    setup_requires = ['pybind11>=2.4.3']  # Chaquopy: removed build_requires
 
     metadata = dict(
         name='scipy',
