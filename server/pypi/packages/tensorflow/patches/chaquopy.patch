diff -urN --no-dereference src-original/tensorflow/BUILD src/tensorflow/BUILD
--- src-original/tensorflow/BUILD	2019-02-25 20:37:04.000000000 +0000
+++ src/tensorflow/BUILD	2019-03-11 11:40:27.633418445 +0000
@@ -57,6 +57,9 @@
 )
 
 # Config setting for determining if we are building for Android.
+#
+# Chaquopy: we are *not* changing this to be true, because it causes everywhere to assume we're
+# building the cut-down Android library, Instead, we add our own config_setting below.
 config_setting(
     name = "android",
     values = {"crosstool_top": "//external:android/crosstool"},
@@ -64,6 +67,12 @@
 )
 
 config_setting(
+    name = "chaquopy",
+    values = {"crosstool_top": "//chaquopy/crosstool"},
+    visibility = ["//visibility:public"],
+)
+
+config_setting(
     name = "android_x86",
     values = {
         "crosstool_top": "//external:android/crosstool",
@@ -608,7 +617,7 @@
     visibility = ["//visibility:public"],
     deps = select({
         "api_version_2": [],
-        "//conditions:default": ["//tensorflow/contrib:contrib_py"],
+        "//conditions:default": [],  # Chaquopy: removed to simplify build: "//tensorflow/contrib:contrib_py"
     }) + [
         ":tensorflow_py_no_contrib",
         "//tensorflow/python/estimator:estimator_py",
diff -urN --no-dereference src-original/tensorflow/compiler/jit/xla_compilation_cache.cc src/tensorflow/compiler/jit/xla_compilation_cache.cc
--- src-original/tensorflow/compiler/jit/xla_compilation_cache.cc	2019-02-25 20:37:04.000000000 +0000
+++ src/tensorflow/compiler/jit/xla_compilation_cache.cc	2019-03-11 16:26:02.478431336 +0000
@@ -38,6 +38,9 @@
 
 namespace tensorflow {
 
+// Chaquopy: https://github.com/tensorflow/tensorflow/issues/23648
+constexpr int64 XlaCompilationCache::kDefaultCompilationThreshold;
+
 XlaCompilationCache::XlaCompilationCache(xla::LocalClient* client,
                                          DeviceType device_type)
     : client_(client), device_type_(std::move(device_type)) {}
diff -urN --no-dereference src-original/tensorflow/core/common_runtime/eager/context.cc src/tensorflow/core/common_runtime/eager/context.cc
--- src-original/tensorflow/core/common_runtime/eager/context.cc	2019-02-25 20:37:04.000000000 +0000
+++ src/tensorflow/core/common_runtime/eager/context.cc	2019-03-11 11:45:06.002689803 +0000
@@ -151,7 +151,6 @@
   return policy_;
 }
 
-#ifndef __ANDROID__
 void EagerContext::CloseRemoteContexts() {
   // Close all remote contexts.
   std::vector<eager::CloseContextRequest> requests(remote_contexts_.size());
@@ -180,10 +179,8 @@
 
   counter.Wait();
 }
-#endif
 
 EagerContext::~EagerContext() {
-#ifndef __ANDROID__
   if (server_) {
     // TODO(nareshmodi): Fix this.
     LOG(WARNING) << "Unable to destroy server_ object, so releasing instead. "
@@ -199,7 +196,6 @@
   keep_alive_thread_.reset();
 
   CloseRemoteContexts();
-#endif
 
   executor_.WaitForAllPendingNodes().IgnoreError();
   ClearCaches();
@@ -262,7 +258,6 @@
 
 Status EagerContext::MaybeRegisterFunctionRemotely(const FunctionDef& fdef) {
   if (remote_device_manager_ == nullptr) return Status::OK();
-#ifndef __ANDROID__
   BlockingCounter blocking_counter(static_cast<int>(remote_contexts_.size()));
 
   std::vector<eager::RegisterFunctionRequest> requests(remote_contexts_.size());
@@ -292,7 +287,6 @@
   for (int i = 0; i < remote_contexts_.size(); i++) {
     TF_RETURN_IF_ERROR(statuses[i]);
   }
-#endif
   return Status::OK();
 }
 
@@ -333,7 +327,6 @@
 }
 }  // namespace
 
-#ifndef __ANDROID__
 Status EagerContext::GetClientAndContextID(Device* device,
                                            eager::EagerClient** client,
                                            uint64* context_id) {
@@ -462,6 +455,5 @@
         }));
   }
 }
-#endif
 
 }  // namespace tensorflow
diff -urN --no-dereference src-original/tensorflow/core/common_runtime/eager/context.h src/tensorflow/core/common_runtime/eager/context.h
--- src-original/tensorflow/core/common_runtime/eager/context.h	2019-02-25 20:37:04.000000000 +0000
+++ src/tensorflow/core/common_runtime/eager/context.h	2019-03-11 11:45:55.752346633 +0000
@@ -29,10 +29,8 @@
 #include "tensorflow/core/common_runtime/eager/kernel_and_device.h"
 #include "tensorflow/core/common_runtime/function.h"
 #include "tensorflow/core/common_runtime/rendezvous_mgr.h"
-#ifndef __ANDROID__
 #include "tensorflow/core/distributed_runtime/eager/eager_client.h"
 #include "tensorflow/core/distributed_runtime/server_lib.h"
-#endif
 #include "tensorflow/core/framework/collective.h"
 #include "tensorflow/core/framework/log_memory.h"
 #include "tensorflow/core/framework/rendezvous.h"
@@ -177,7 +175,6 @@
 
   FunctionLibraryDefinition* FuncLibDef() { return &func_lib_def_; }
 
-#ifndef __ANDROID__
   Status GetClientAndContextID(Device* device, eager::EagerClient** client,
                                uint64* context_id);
 
@@ -204,7 +201,6 @@
     return active_remote_contexts_.find(context_id) !=
            active_remote_contexts_.end();
   }
-#endif
 
   // If true, then tensors should be shipped across processes via the
   // EagerService.SendTensor RPC. If false, _Send/_Recv ops should be used
@@ -281,7 +277,6 @@
 
   std::unique_ptr<CollectiveExecutorMgrInterface> collective_executor_mgr_;
 
-#ifndef __ANDROID__
   void CloseRemoteContexts();
 
   // The server_ is not const since we release it when the context is destroyed.
@@ -304,7 +299,6 @@
   mutex keep_alive_thread_shutdown_mu_;
   condition_variable keep_alive_thread_cv_;
   bool shutting_down_ GUARDED_BY(keep_alive_thread_shutdown_mu_) = false;
-#endif
 
   bool use_send_tensor_rpc_;
   const bool pin_small_ops_to_cpu_;
diff -urN --no-dereference src-original/tensorflow/core/common_runtime/eager/execute.cc src/tensorflow/core/common_runtime/eager/execute.cc
--- src-original/tensorflow/core/common_runtime/eager/execute.cc	2019-02-25 20:37:04.000000000 +0000
+++ src/tensorflow/core/common_runtime/eager/execute.cc	2019-03-11 11:47:54.760309847 +0000
@@ -25,10 +25,8 @@
 #include "tensorflow/core/common_runtime/eager/kernel_and_device.h"
 #include "tensorflow/core/common_runtime/eager/tensor_handle.h"
 #include "tensorflow/core/lib/core/errors.h"
-#ifndef __ANDROID__
 #include "tensorflow/core/distributed_runtime/eager/eager_client.h"
 #include "tensorflow/core/distributed_runtime/eager/remote_execute_node.h"
-#endif
 #include "tensorflow/core/framework/step_stats.pb.h"
 #include "tensorflow/core/framework/tensor.h"
 #include "tensorflow/core/framework/types.h"
@@ -355,7 +353,6 @@
   return status;
 }
 
-#ifndef __ANDROID__
 std::function<void()> GetRemoteTensorDestructor(
     EagerContext* ctx, eager::EagerClient* eager_client, uint64 context_id,
     uint64 op_id, int output_num) {
@@ -393,7 +390,6 @@
     return tensorflow::Status::OK();
   };
 }
-#endif
 
 // When !ctx->UseSendTensorRPC(), then tensors are shipped between remote
 // devices by the receiver invoking the WorkerService.RecvTensor RPC *on the
@@ -405,10 +401,6 @@
 // *on the receiver*.
 Status EagerRemoteSendTensor(EagerContext* ctx, TensorHandle* h,
                              Device* recv_device, TensorHandle** result) {
-#ifdef __ANDROID__
-  return errors::Unimplemented(
-      "Eager's remote execution is not available on Android devices.");
-#else
   eager::EagerClient* eager_client;
   uint64 context_id;
   TF_RETURN_IF_ERROR(
@@ -464,15 +456,10 @@
   actual_handle->Unref();
 
   return Status::OK();
-#endif
 }
 
 Status EagerRemoteExecute(EagerOperation* op, TensorHandle** retvals,
                           int* num_retvals) {
-#ifdef __ANDROID__
-  return errors::Unimplemented(
-      "Eager's remote execution is not available on Android devices.");
-#else
   EagerContext* ctx = op->EagerContext();
 
   eager::EagerClient* eager_client;
@@ -590,7 +577,6 @@
   }
 
   return Status::OK();
-#endif
 }
 
 // These ops are not pinnable since they generate data. It can be slower to
diff -urN --no-dereference src-original/tensorflow/core/platform/platform.h src/tensorflow/core/platform/platform.h
--- src-original/tensorflow/core/platform/platform.h	2018-08-23 19:58:44.000000000 +0000
+++ src/tensorflow/core/platform/platform.h	2018-09-20 20:49:57.361222382 +0000
@@ -26,7 +26,10 @@
 // Choose which platform we are on.
 #if defined(ANDROID) || defined(__ANDROID__)
 #define PLATFORM_POSIX_ANDROID
-#define IS_MOBILE_PLATFORM
+
+// Chaquopy disabled: this disables many types (tensorflow/core/framework/register_types.h),
+// including bfloat16, which tensorflow/core/kernels/list_kernels.cc uses unconditionally.
+// #define IS_MOBILE_PLATFORM
 
 #elif defined(__APPLE__)
 #define PLATFORM_POSIX
diff -urN --no-dereference src-original/tensorflow/lite/kernels/internal/optimized/cpu_check.h src/tensorflow/lite/kernels/internal/optimized/cpu_check.h
--- src-original/tensorflow/lite/kernels/internal/optimized/cpu_check.h	2019-02-25 20:37:04.000000000 +0000
+++ src/tensorflow/lite/kernels/internal/optimized/cpu_check.h	2019-03-11 13:41:42.646395999 +0000
@@ -18,7 +18,10 @@
 namespace tflite {
 
 #ifdef __ANDROID__
-#include "ndk/sources/android/cpufeatures/cpu-features.h"
+// Chaquopy: cpufeatures is made available via @androidndk//:cpufeatures in ./BUILD,
+// conditional on //tensorflow:android, which we've not enabled for the reasons explained in
+// tensorflow/BUILD.
+// #include "ndk/sources/android/cpufeatures/cpu-features.h"
 
 // Runtime check for Neon support on Android.
 inline bool TestCPUFeatureNeon() {
@@ -26,11 +29,9 @@
   // ARM-64 always has NEON support.
   return true;
 #else
-  static bool kUseAndroidNeon =
-      (android_getCpuFamily() == ANDROID_CPU_FAMILY_ARM &&
-       android_getCpuFeatures() & ANDROID_CPU_ARM_FEATURE_ARMv7 &&
-       android_getCpuFeatures() & ANDROID_CPU_ARM_FEATURE_NEON);
-  return kUseAndroidNeon;
+  // Chaquopy: removed call to cpufeatures: see above. Returning false because NEON is not
+  // guaranteed on armeabi-v7a: see chaquopy-openblas/build.sh.
+  return false;
 #endif  // __aarch64__
 }
 
diff -urN --no-dereference src-original/tensorflow/python/BUILD src/tensorflow/python/BUILD
--- src-original/tensorflow/python/BUILD	2019-02-25 20:37:04.000000000 +0000
+++ src/tensorflow/python/BUILD	2019-03-11 11:27:51.076213806 +0000
@@ -69,7 +69,7 @@
     ],
     deps = [
         ":no_contrib",
-        "//tensorflow/contrib:contrib_py",
+        # Chaquopy: removed to simplify build: "//tensorflow/contrib:contrib_py",
         "//tensorflow/python/estimator:estimator_py",
     ],
 )
diff -urN --no-dereference src-original/tensorflow/tensorflow.bzl src/tensorflow/tensorflow.bzl
--- src-original/tensorflow/tensorflow.bzl	2019-02-25 20:37:04.000000000 +0000
+++ src/tensorflow/tensorflow.bzl	2019-03-11 11:51:06.758703356 +0000
@@ -1669,6 +1669,12 @@
             "-Wl,-exported_symbols_list,$(location %s.lds)" % vscriptname,
         ],
         clean_dep("//tensorflow:windows"): [],
+        clean_dep("//tensorflow:chaquopy"): [
+            "-Wl,--no-undefined",  # See note in build.sh.
+            "-llog",               #
+            "-Wl,--version-script",
+            "$(location %s.lds)"%vscriptname,
+        ],
         "//conditions:default": [
             "-Wl,--version-script",
             "$(location %s.lds)" % vscriptname,
diff -urN --no-dereference src-original/tensorflow/tools/pip_package/BUILD src/tensorflow/tools/pip_package/BUILD
--- src-original/tensorflow/tools/pip_package/BUILD	2019-02-25 20:37:04.000000000 +0000
+++ src/tensorflow/tools/pip_package/BUILD	2019-03-11 11:59:12.694882636 +0000
@@ -248,7 +248,9 @@
         "api_version_2": COMMON_PIP_DEPS + [
             ":simple_console",
         ],
-        "//conditions:default": COMMON_PIP_DEPS_V1 + [
+        # Chaquopy: to simplify build, changed COMMON_PIP_DEPS_V1 to COMMON_PIP_DEPS below.
+        # This removes everything under //tensorflow/contrib.
+        "//conditions:default": COMMON_PIP_DEPS + [
             ":simple_console",
         ],
     }) + if_mkl_ml(["//third_party/mkl:intel_binary_blob"]),
diff -urN --no-dereference src-original/tensorflow/workspace.bzl src/tensorflow/workspace.bzl
--- src-original/tensorflow/workspace.bzl	2019-02-25 20:37:04.000000000 +0000
+++ src/tensorflow/workspace.bzl	2019-03-11 14:28:54.452389887 +0000
@@ -136,11 +136,12 @@
     tf_http_archive(
         name = "eigen_archive",
         build_file = clean_dep("//third_party:eigen.BUILD"),
-        sha256 = "753fbb58d0a49b6bcbcfb126ebfa2e21fc97f7471529ba835a096008ce588d8a",
-        strip_prefix = "eigen-eigen-9f48e814419e",
+        # Chaquopy: cherry-pick from https://github.com/tensorflow/tensorflow/issues/24457
+        sha256 = "9de38f2d162c51599b802f7c36d9f3773980d19ac908c61638f8344d2c10e1ca",
+        strip_prefix = "eigen-eigen-88fc23324517",
         urls = [
-            "https://mirror.bazel.build/bitbucket.org/eigen/eigen/get/9f48e814419e.tar.gz",
-            "https://bitbucket.org/eigen/eigen/get/9f48e814419e.tar.gz",
+            "https://mirror.bazel.build/bitbucket.org/eigen/eigen/get/88fc23324517.tar.gz",
+            "https://bitbucket.org/eigen/eigen/get/88fc23324517.tar.gz",
         ],
     )
 
@@ -437,13 +438,15 @@
     tf_http_archive(
         name = "swig",
         build_file = clean_dep("//third_party:swig.BUILD"),
-        sha256 = "58a475dbbd4a4d7075e5fe86d4e54c9edde39847cdb96a3053d87cb64a23a453",
-        strip_prefix = "swig-3.0.8",
+        # Chaquopy: upgrade from SWIG 3.0.8, which incorrectly used __file__ to find submodules
+        # rather than __path__.
+        sha256 = "4f3a4afb22ac1a9dd9c8725175451bda8bae5c564761edc01e0edd2c672857f0",
+        strip_prefix = "swig-3.0.9",
         system_build_file = clean_dep("//third_party/systemlibs:swig.BUILD"),
         urls = [
-            "https://mirror.bazel.build/ufpr.dl.sourceforge.net/project/swig/swig/swig-3.0.8/swig-3.0.8.tar.gz",
-            "http://ufpr.dl.sourceforge.net/project/swig/swig/swig-3.0.8/swig-3.0.8.tar.gz",
-            "http://pilotfiber.dl.sourceforge.net/project/swig/swig/swig-3.0.8/swig-3.0.8.tar.gz",
+            "https://mirror.bazel.build/ufpr.dl.sourceforge.net/project/swig/swig/swig-3.0.9/swig-3.0.9.tar.gz",
+            "http://ufpr.dl.sourceforge.net/project/swig/swig/swig-3.0.9/swig-3.0.9.tar.gz",
+            "http://pilotfiber.dl.sourceforge.net/project/swig/swig/swig-3.0.9/swig-3.0.9.tar.gz",
         ],
     )
 
@@ -462,6 +465,7 @@
     # WARNING: make sure ncteisen@ and vpai@ are cc-ed on any CL to change the below rule
     tf_http_archive(
         name = "grpc",
+        patch_file = clean_dep("//third_party/grpc:chaquopy.patch"),
         sha256 = "1aa84387232dda273ea8fdfe722622084f72c16f7b84bfc519ac7759b71cdc91",
         strip_prefix = "grpc-69b6c047bc767b4d80e7af4d00ccb7c45b683dae",
         system_build_file = clean_dep("//third_party/systemlibs:grpc.BUILD"),
@@ -532,6 +536,7 @@
 
     tf_http_archive(
         name = "boringssl",
+        build_file = clean_dep("//third_party:boringssl.BUILD"),  # Chaquopy override
         sha256 = "1188e29000013ed6517168600fc35a010d58c5d321846d6a6dfee74e4c788b45",
         strip_prefix = "boringssl-7f634429a04abc48e2eb041c81c5235816c96514",
         system_build_file = clean_dep("//third_party/systemlibs:boringssl.BUILD"),
diff -urN --no-dereference src-original/third_party/aws/BUILD.bazel src/third_party/aws/BUILD.bazel
--- src-original/third_party/aws/BUILD.bazel	2019-02-25 20:37:04.000000000 +0000
+++ src/third_party/aws/BUILD.bazel	2019-03-11 16:58:31.534820702 +0000
@@ -24,7 +24,10 @@
         "@org_tensorflow//tensorflow:raspberry_pi_armeabi": glob([
             "aws-cpp-sdk-core/source/platform/linux-shared/*.cpp",
         ]),
-        "//conditions:default": [],
+        "//conditions:default": glob([
+            # Chaquopy: added
+            "aws-cpp-sdk-core/source/platform/linux-shared/*.cpp",
+        ]),
     }) + glob([
         "aws-cpp-sdk-core/include/**/*.h",
         "aws-cpp-sdk-core/source/*.cpp",
diff -urN --no-dereference src-original/third_party/boringssl.BUILD src/third_party/boringssl.BUILD
--- src-original/third_party/boringssl.BUILD	1970-01-01 00:00:00.000000000 +0000
+++ src/third_party/boringssl.BUILD	2018-09-20 20:49:57.365222384 +0000
@@ -0,0 +1,152 @@
+# Chaquopy: We've edited tensorflow/workspace.bzl to use this file.
+# 
+# Based on https://github.com/google/boringssl/blob/a0fb951d2a26a8ee746b52f3ba81ab011a0af778/BUILD.
+
+licenses(["notice"])
+
+exports_files(["LICENSE"])
+
+load(
+    ":BUILD.generated.bzl",
+    "crypto_headers",
+    "crypto_internal_headers",
+    "crypto_sources",
+    "crypto_sources_linux_x86_64",
+    "crypto_sources_mac_x86_64",
+    "fips_fragments",
+    "ssl_headers",
+    "ssl_internal_headers",
+    "ssl_sources",
+    "tool_sources",
+    "tool_headers",
+)
+
+config_setting(
+    name = "linux_x86_64",
+    values = {"cpu": "k8"},
+)
+
+config_setting(
+    name = "mac_x86_64",
+    values = {"cpu": "darwin"},
+)
+
+config_setting(
+    name = "windows_x86_64",
+    values = {"cpu": "x64_windows"},
+)
+
+config_setting(
+    name = "android",
+    values = {"crosstool_top": "//chaquopy/crosstool"},
+)
+
+
+posix_copts = [
+    # Assembler option --noexecstack adds .note.GNU-stack to each object to
+    # ensure that binaries can be built with non-executable stack.
+    "-Wa,--noexecstack",
+
+    # This is needed on Linux systems (at least) to get rwlock in pthread.
+    "-D_XOPEN_SOURCE=700",
+
+    # This list of warnings should match those in the top-level CMakeLists.txt.
+    "-Wall",
+    "-Werror",
+    "-Wformat=2",
+    "-Wsign-compare",
+    "-Wmissing-field-initializers",
+    "-Wwrite-strings",
+    "-Wshadow",
+    "-fno-common",
+
+    # Modern build environments should be able to set this to use atomic
+    # operations for reference counting rather than locks. However, it's
+    # known not to work on some Android builds.
+    # "-DOPENSSL_C11_ATOMIC",
+]
+
+
+# Chaquopy: we need to enable posix_copts and its variations, otherwise the -std flag would not
+# be passed and code requiring C++11 would fail to build.
+#
+# We also need -DOPENSSL_NO_ASM, otherwise the final binary somehow ends up with an undefined
+# reference to vpaes_decrypt
+# (https://boringssl.googlesource.com/boringssl/+/8adf4f1d891679df91e1d1551527b6fc0c8a7d15/crypto/cipher/e_aes.c#90).
+boringssl_copts = select({
+    ":android": posix_copts + ["-DOPENSSL_NO_ASM"],  # Chaquopy: added
+    ":linux_x86_64": posix_copts,
+    ":mac_x86_64": posix_copts,
+    ":windows_x86_64": [
+        "-DWIN32_LEAN_AND_MEAN",
+        "-DOPENSSL_NO_ASM",
+    ],
+    "//conditions:default": ["-DOPENSSL_NO_ASM"],
+})
+
+crypto_sources_asm = select({
+    ":linux_x86_64": crypto_sources_linux_x86_64,
+    ":mac_x86_64": crypto_sources_mac_x86_64,
+    "//conditions:default": [],
+})
+
+# For C targets only (not C++), compile with C11 support.
+posix_copts_c11 = [
+    "-std=c11",
+    "-Wmissing-prototypes",
+    "-Wold-style-definition",
+    "-Wstrict-prototypes",
+]
+
+boringssl_copts_c11 = boringssl_copts + select({
+    ":android": posix_copts_c11,  # Chaquopy: added
+    ":linux_x86_64": posix_copts_c11,
+    ":mac_x86_64": posix_copts_c11,
+    "//conditions:default": [],
+})
+
+# For C++ targets only (not C), compile with C++11 support.
+posix_copts_cxx = [
+    "-std=c++11",
+    "-Wmissing-declarations",
+]
+
+boringssl_copts_cxx = boringssl_copts + select({
+    ":android": posix_copts_cxx,  # Chaquopy: added
+    ":linux_x86_64": posix_copts_cxx,
+    ":mac_x86_64": posix_copts_cxx,
+    "//conditions:default": [],
+})
+
+cc_library(
+    name = "crypto",
+    srcs = crypto_sources + crypto_internal_headers + crypto_sources_asm,
+    hdrs = crypto_headers + fips_fragments,
+    copts = boringssl_copts_c11,
+    includes = ["src/include"],
+    linkopts = select({
+        ":mac_x86_64": [],
+        "//conditions:default": ["-lpthread"],
+    }),
+    visibility = ["//visibility:public"],
+)
+
+cc_library(
+    name = "ssl",
+    srcs = ssl_sources + ssl_internal_headers,
+    hdrs = ssl_headers,
+    copts = boringssl_copts_cxx,
+    includes = ["src/include"],
+    visibility = ["//visibility:public"],
+    deps = [
+        ":crypto",
+    ],
+)
+
+cc_binary(
+    name = "bssl",
+    srcs = tool_sources + tool_headers,
+    copts = boringssl_copts_cxx,
+    visibility = ["//visibility:public"],
+    deps = [":ssl"],
+)
diff -urN --no-dereference src-original/third_party/gif.BUILD src/third_party/gif.BUILD
--- src-original/third_party/gif.BUILD	2018-08-23 19:58:44.000000000 +0000
+++ src/third_party/gif.BUILD	2018-09-20 20:49:57.365222384 +0000
@@ -66,5 +66,5 @@
 
 config_setting(
     name = "android",
-    values = {"crosstool_top": "//external:android/crosstool"},
+    values = {"crosstool_top": "//chaquopy/crosstool"},
 )
diff -urN src-original/third_party/grpc/chaquopy.patch src/third_party/grpc/chaquopy.patch
--- src-original/third_party/grpc/chaquopy.patch	1970-01-01 00:00:00.000000000 +0000
+++ src/third_party/grpc/chaquopy.patch 2019-03-06 20:33:50.086229265 +0000
@@ -0,0 +1,12 @@
+--- a/src/core/lib/gpr/wrap_memcpy.cc  2018-06-28 00:25:45.000000000 +0000
++++ b/src/core/lib/gpr/wrap_memcpy.cc  2019-03-06 20:31:01.440544707 +0000
+@@ -28,7 +28,8 @@
+
+ extern "C" {
+ #ifdef __linux__
+-#if defined(__x86_64__) && !defined(GPR_MUSL_LIBC_COMPAT)
++// Chaquopy: disabled
++#if 0 && defined(__x86_64__) && !defined(GPR_MUSL_LIBC_COMPAT)
+ __asm__(".symver memcpy,memcpy@GLIBC_2.2.5");
+ void* __wrap_memcpy(void* destination, const void* source, size_t num) {
+   return memcpy(destination, source, num);
diff -urN --no-dereference src-original/third_party/llvm/llvm.bzl src/third_party/llvm/llvm.bzl
--- src-original/third_party/llvm/llvm.bzl	2019-02-25 20:37:04.000000000 +0000
+++ src/third_party/llvm/llvm.bzl	2019-03-11 14:03:47.578289993 +0000
@@ -201,8 +201,11 @@
     "HAVE_ZLIB_H": 1,
 
     # Features
-    "HAVE_BACKTRACE": 1,
-    "BACKTRACE_HEADER": "execinfo.h",
+
+    # Chaquopy: this header isn't available on Android.
+    # "HAVE_BACKTRACE": 1,
+    # "BACKTRACE_HEADER": "execinfo.h",
+
     "HAVE_DLOPEN": 1,
     "HAVE_FUTIMES": 1,
     "HAVE_GETCWD": 1,
diff -urN --no-dereference src-original/third_party/lmdb.BUILD src/third_party/lmdb.BUILD
--- src-original/third_party/lmdb.BUILD	2018-08-23 19:58:44.000000000 +0000
+++ src/third_party/lmdb.BUILD	2018-09-20 20:49:57.365222384 +0000
@@ -17,6 +17,7 @@
     ],
     copts = [
         "-w",
+        "-DANDROID",  # Chaquopy: our compiler only defines __ANDROID__.
     ],
     linkopts = select({
         ":windows": ["-DEFAULTLIB:advapi32.lib"],  # InitializeSecurityDescriptor, SetSecurityDescriptorDacl
diff -urN --no-dereference src-original/third_party/py/BUILD.tpl src/third_party/py/BUILD.tpl
--- src-original/third_party/py/BUILD.tpl	2018-08-23 19:58:44.000000000 +0000
+++ src/third_party/py/BUILD.tpl	2018-09-20 20:49:57.365222384 +0000
@@ -2,11 +2,17 @@
 
 package(default_visibility = ["//visibility:public"])
 
+config_setting(
+    name = "chaquopy",
+    values = {"crosstool_top": "//chaquopy/crosstool"},
+)
+
 # To build Python C/C++ extension on Windows, we need to link to python import library pythonXY.lib
 # See https://docs.python.org/3/extending/windows.html
 cc_import(
     name = "python_lib",
     interface_library = select({
+        ":chaquopy": ":python_import_lib",
         ":windows": ":python_import_lib",
         # A placeholder for Unix platforms which makes --no_build happy.
         "//conditions:default": "not-existing.lib",
@@ -16,18 +22,31 @@
 
 cc_library(
     name = "python_headers",
-    hdrs = [":python_include"],
+    hdrs = select({
+        ":chaquopy": [":chaquopy_python_include"],
+        "//conditions:default": [":python_include"],
+    }),
     deps = select({
+        ":chaquopy": [":python_lib"],
         ":windows": [":python_lib"],
         "//conditions:default": [],
     }),
-    includes = ["python_include"],
+    includes = select({
+        ":chaquopy": ["chaquopy_python_include"],
+        "//conditions:default": ["python_include"],
+    }),
 )
 
 cc_library(
     name = "numpy_headers",
-    hdrs = [":numpy_include"],
-    includes = ["numpy_include"],
+    hdrs = select({
+        ":chaquopy": [":chaquopy_numpy_include"],
+        "//conditions:default": [":numpy_include"],
+    }),
+    includes = select({
+        ":chaquopy": ["chaquopy_numpy_include"],
+        "//conditions:default": ["numpy_include"],
+    }),
 )
 
 config_setting(
@@ -38,4 +57,6 @@
 
 %{PYTHON_INCLUDE_GENRULE}
 %{NUMPY_INCLUDE_GENRULE}
+%{CHAQUOPY_PYTHON_INCLUDE_GENRULE}
+%{CHAQUOPY_NUMPY_INCLUDE_GENRULE}
 %{PYTHON_IMPORT_LIB_GENRULE}
diff -urN --no-dereference src-original/third_party/py/python_configure.bzl src/third_party/py/python_configure.bzl
--- src-original/third_party/py/python_configure.bzl	2018-08-23 19:58:44.000000000 +0000
+++ src/third_party/py/python_configure.bzl	2018-09-20 20:49:57.365222384 +0000
@@ -273,6 +273,13 @@
   python_include_rule = _symlink_genrule_for_dir(
       repository_ctx, python_include, 'python_include', 'python_include')
   python_import_lib_genrule = ""
+
+  chaquopy_python_include = repository_ctx.os.environ["CHAQUOPY_PYTHON_INCLUDE_DIR"]
+  chaquopy_numpy_include = (repository_ctx.os.environ["SRC_DIR"] +
+                            "/../requirements/numpy/core/include/numpy")
+  chaquopy_python_include_rule = _symlink_genrule_for_dir(
+      repository_ctx, chaquopy_python_include, 'chaquopy_python_include', 'chaquopy_python_include')
+  
   # To build Python C/C++ extension on Windows, we need to link to python import library pythonXY.lib
   # See https://docs.python.org/3/extending/windows.html
   if _is_windows(repository_ctx):
@@ -282,12 +289,27 @@
     python_import_lib_genrule = _symlink_genrule_for_dir(
       repository_ctx, None, '', 'python_import_lib',
       [python_import_lib_src], [python_import_lib_name])
+
+  # Chaquopy: no point in generating separate host and target rules for libpython, because
+  # we'll never support building TensorFlow on Windows.
+  python_import_lib_name = "lib" + repository_ctx.os.environ["CHAQUOPY_PYTHON_LIB"] + ".so"
+  python_import_lib_src = (repository_ctx.os.environ["CHAQUOPY_PYTHON_INCLUDE_DIR"] +
+                           "/../../lib/" + python_import_lib_name)
+  python_import_lib_genrule = _symlink_genrule_for_dir(
+    repository_ctx, None, '', 'python_import_lib',
+    [python_import_lib_src], [python_import_lib_name])
+
   numpy_include_rule = _symlink_genrule_for_dir(
       repository_ctx, numpy_include, 'numpy_include/numpy', 'numpy_include')
+  chaquopy_numpy_include_rule = _symlink_genrule_for_dir(
+      repository_ctx, chaquopy_numpy_include, 'chaquopy_numpy_include/numpy', 'chaquopy_numpy_include')
+
   _tpl(repository_ctx, "BUILD", {
       "%{PYTHON_INCLUDE_GENRULE}": python_include_rule,
+      "%{CHAQUOPY_PYTHON_INCLUDE_GENRULE}": chaquopy_python_include_rule,
       "%{PYTHON_IMPORT_LIB_GENRULE}": python_import_lib_genrule,
       "%{NUMPY_INCLUDE_GENRULE}": numpy_include_rule,
+      "%{CHAQUOPY_NUMPY_INCLUDE_GENRULE}": chaquopy_numpy_include_rule,
   })
 
 
diff -urN --no-dereference src-original/third_party/swig.BUILD src/third_party/swig.BUILD
--- src-original/third_party/swig.BUILD	2019-02-25 20:37:04.000000000 +0000
+++ src/third_party/swig.BUILD	2019-03-11 11:27:51.076213806 +0000
@@ -1,3 +1,5 @@
+# Chaquopy: updated for SWIG 3.0.9 (see tensorflow/workspace.bzl).
+
 licenses(["restricted"])  # GPLv3
 
 exports_files(["LICENSE"])
@@ -28,6 +30,7 @@
         "Source/Modules/contract.cxx",
         "Source/Modules/directors.cxx",
         "Source/Modules/emit.cxx",
+        "Source/Modules/interface.cxx",
         "Source/Modules/lang.cxx",
         "Source/Modules/main.cxx",
         "Source/Modules/module.cxx",
@@ -126,7 +129,6 @@
         "Lib/python/defarg.swg",
         "Lib/python/director.swg",
         "Lib/python/embed.i",
-        "Lib/python/embed15.i",
         "Lib/python/exception.i",
         "Lib/python/factory.i",
         "Lib/python/file.i",
@@ -291,7 +293,7 @@
           "#define HAVE_PCRE\n" +
           "#define HAVE_POPEN\n" +
           "#define PACKAGE_BUGREPORT \"http://www.swig.org\"\n" +
-          "#define PACKAGE_VERSION \"3.0.8\"\n" +
+          "#define PACKAGE_VERSION \"3.0.9\"\n" +
           "#define STDC_HEADERS\n" +
           "#define SWIG_CXX \"bazel4lyfe\"\n" +
           "#define SWIG_LIB \"external/swig/Lib\"\n" +
