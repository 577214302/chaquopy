--- src-original/aten/src/ATen/CMakeLists.txt	2020-02-06 11:08:10.439120273 +0000
+++ src/aten/src/ATen/CMakeLists.txt	2020-02-05 15:35:10.000847687 +0000
@@ -188,7 +188,10 @@
     ADD_DEFINITIONS(-DHAVE_MMAP=1)
   ENDIF(HAVE_MMAP)
   # done for lseek: https://www.gnu.org/software/libc/manual/html_node/File-Position-Primitive.html
-  ADD_DEFINITIONS(-D_FILE_OFFSET_BITS=64)
+
+  # Chaquopy: see https://android.googlesource.com/platform/bionic/+/master/docs/32-bit-abi.md
+  # ADD_DEFINITIONS(-D_FILE_OFFSET_BITS=64)
+
   CHECK_FUNCTION_EXISTS(shm_open HAVE_SHM_OPEN)
   IF(HAVE_SHM_OPEN)
     ADD_DEFINITIONS(-DHAVE_SHM_OPEN=1)
--- src-original/c10/macros/Macros.h	2020-02-06 11:08:10.527119881 +0000
+++ src/c10/macros/Macros.h	2020-02-05 18:09:54.813189200 +0000
@@ -205,7 +205,8 @@
 
 #if defined(__ANDROID__)
 #define C10_ANDROID 1
-#define C10_MOBILE 1
+// Chaquopy: this disables things required by the Python build.
+// #define C10_MOBILE 1
 #elif (                   \
     defined(__APPLE__) && \
     (TARGET_IPHONE_SIMULATOR || TARGET_OS_SIMULATOR || TARGET_OS_IPHONE))
--- src-original/cmake/Dependencies.cmake	2020-02-06 11:08:10.683119187 +0000
+++ src/cmake/Dependencies.cmake	2020-02-05 19:59:52.054372612 +0000
@@ -1164,7 +1164,7 @@
   # In mobile build we care about code size, and so we need drop
   # everything (e.g. checker, optimizer) in onnx but the pb definition.
   if (ANDROID OR IOS)
-    caffe2_interface_library(onnx_proto onnx_library)
+    caffe2_interface_library(onnx onnx_library)  # Chaquopy: `onnx` was `onnx_proto`.
   else()
     caffe2_interface_library(onnx onnx_library)
   endif()
@@ -1340,7 +1340,8 @@
     add_compile_options(-DUSE_GCC_GET_CPUID)
   ENDIF()
 
-  FIND_PACKAGE(AVX) # checks AVX and AVX2
+  # Chaquopy: AVX isn't supported by Android even on x86_64.
+  # FIND_PACKAGE(AVX) # checks AVX and AVX2
 
   # we don't set -mavx and -mavx2 flags globally, but only for specific files
   # however, we want to enable the AVX codepaths, so we still need to
@@ -1227,7 +1228,8 @@
     add_compile_options(-DUSE_AVX2)
   ENDIF()
 
-  CHECK_C_SOURCE_RUNS("
+  # Chaquopy: was CHECK_C_SOURCE_RUNS
+  CHECK_C_SOURCE_COMPILES("
   #include <stdatomic.h>
   // ATOMIC_INT_LOCK_FREE is flaky on some older gcc versions
   // so if this define is not usable a preprocessor definition
@@ -1249,7 +1251,8 @@
   " HAS_C11_ATOMICS)
 
   IF (NOT HAS_C11_ATOMICS)
-    CHECK_C_SOURCE_RUNS("
+    # Chaquopy: was CHECK_C_SOURCE_RUNS
+    CHECK_C_SOURCE_COMPILES("
   #include <intrin.h>
   int main()
   {
@@ -1262,7 +1265,8 @@
   }
   " HAS_MSC_ATOMICS)
 
-    CHECK_C_SOURCE_RUNS("
+    # Chaquopy: was CHECK_C_SOURCE_RUNS
+    CHECK_C_SOURCE_COMPILES("
   int main()
   {
     int a;
@@ -1426,7 +1427,10 @@
       ADD_DEFINITIONS(-DHAVE_MMAP=1)
     ENDIF(HAVE_MMAP)
     # done for lseek: https://www.gnu.org/software/libc/manual/html_node/File-Position-Primitive.html
-    ADD_DEFINITIONS(-D_FILE_OFFSET_BITS=64)
+
+    # Chaquopy: see https://android.googlesource.com/platform/bionic/+/master/docs/32-bit-abi.md
+    # ADD_DEFINITIONS(-D_FILE_OFFSET_BITS=64)
+
     CHECK_FUNCTION_EXISTS(shm_open HAVE_SHM_OPEN)
     IF(HAVE_SHM_OPEN)
       ADD_DEFINITIONS(-DHAVE_SHM_OPEN=1)
--- src-original/cmake/MiscCheck.cmake	2020-02-06 11:08:10.683119187 +0000
+++ src/cmake/MiscCheck.cmake	2020-02-05 18:18:48.966927626 +0000
@@ -43,7 +43,8 @@
   # important because with ASAN you might need to help the compiled library find
   # some dynamic libraries.
   cmake_push_check_state(RESET)
-  CHECK_C_SOURCE_RUNS("
+  # Chaquopy: was CHECK_C_SOURCE_RUNS
+  CHECK_C_SOURCE_COMPILES("
   int main() { return 0; }
   " COMPILER_WORKS)
   if (NOT COMPILER_WORKS)
@@ -172,6 +173,10 @@
        _mm256_extract_epi64(x, 0); // we rely on this in our AVX2 code
        return 0;
      }" CAFFE2_COMPILER_SUPPORTS_AVX2_EXTENSIONS)
+
+  # Chaquopy: AVX isn't supported by Android even on x86_64.
+  set(CAFFE2_COMPILER_SUPPORTS_AVX2_EXTENSIONS "")
+
 if (CAFFE2_COMPILER_SUPPORTS_AVX2_EXTENSIONS)
   message(STATUS "Current compiler supports avx2 extension. Will build perfkernels.")
   # Also see CMakeLists.txt under caffe2/perfkernels.
@@ -216,6 +221,10 @@
        __mmask16 m = _mm512_cmp_epi32_mask(a, a, _MM_CMPINT_EQ);
        __m512i r = _mm512_andnot_si512(a, a);
      }" CAFFE2_COMPILER_SUPPORTS_AVX512_EXTENSIONS)
+
+# Chaquopy: AVX isn't supported by Android even on x86_64.
+set(CAFFE2_COMPILER_SUPPORTS_AVX512_EXTENSIONS "")
+
 if (CAFFE2_COMPILER_SUPPORTS_AVX512_EXTENSIONS)
   message(STATUS "Current compiler supports avx512f extension. Will build fbgemm.")
   # Also see CMakeLists.txt under caffe2/perfkernels.
--- src-original/cmake/Modules/FindBLAS.cmake	2020-02-06 11:08:10.683119187 +0000
+++ src/cmake/Modules/FindBLAS.cmake	2020-02-07 10:52:39.368484856 +0000
@@ -256,6 +256,13 @@
 # Determine if blas was compiled with the f2c conventions
 IF (BLAS_LIBRARIES)
   SET(CMAKE_REQUIRED_LIBRARIES ${BLAS_LIBRARIES})
+
+  IF(TRUE)
+    # Chaquopy: gfortran does not use the f2c return conventions (see
+    # https://gcc.gnu.org/onlinedocs/gcc-4.6.3/gfortran/Code-Gen-Options.html).
+    SET(BLAS_F2C_DOUBLE_WORKS TRUE)
+    SET(BLAS_F2C_FLOAT_WORKS TRUE)
+  ELSE()
   CHECK_C_SOURCE_RUNS("
 #include <stdlib.h>
 #include <stdio.h>
@@ -282,13 +289,17 @@
   double r = sdot_(&four, x, &one, y, &one);
   exit((float)r != (float).1234);
 }" BLAS_F2C_FLOAT_WORKS )
+  ENDIF()
+
   IF (BLAS_F2C_DOUBLE_WORKS AND NOT BLAS_F2C_FLOAT_WORKS)
     MESSAGE(STATUS "This BLAS uses the F2C return conventions")
     SET(BLAS_F2C TRUE)
   ELSE (BLAS_F2C_DOUBLE_WORKS AND NOT BLAS_F2C_FLOAT_WORKS)
     SET(BLAS_F2C FALSE)
   ENDIF (BLAS_F2C_DOUBLE_WORKS AND NOT BLAS_F2C_FLOAT_WORKS)
-  CHECK_C_SOURCE_RUNS("
+
+  # Chaquopy: was CHECK_C_SOURCE_RUNS
+  CHECK_C_SOURCE_COMPILES("
 #include <stdlib.h>
 #include <stdio.h>
 float x[4] = { 1, 2, 3, 4 };
--- src-original/CMakeLists.txt	2020-02-06 11:08:10.435120292 +0000
+++ src/CMakeLists.txt	2020-02-05 13:58:13.845305370 +0000
@@ -166,7 +166,7 @@
 endif(MSVC)
 
 if (ANDROID OR IOS)
-  set(BUILD_ATEN_MOBILE ON)
+  # set(BUILD_ATEN_MOBILE ON)
 endif()
 
 if (BUILD_ATEN_ONLY)
--- src-original/setup.py	2020-02-06 11:08:10.707119080 +0000
+++ src/setup.py	2020-02-05 22:32:19.222917597 +0000
@@ -159,6 +159,15 @@
 import glob
 import importlib
 
+# Chaquopy: CMake variables which setup.py accepts as environment variables are set here, as
+# they may also affect other things in setup.py. Other variables are set in
+# tools/setup_helpers/cmake.py.
+os.environ.update(
+    BUILD_TEST="0",
+    USE_DISTRIBUTED="0",  # csrc/distributed/c10d/init.cpp.o: [...] undefined reference to 'typeinfo for c10d::ProcessGroupGloo'
+    USE_FBGEMM="0",  # Requires AVX, which isn't supported by Android even on x86_64.
+)
+
 from tools.build_pytorch_libs import build_caffe2
 from tools.setup_helpers.env import (IS_WINDOWS, IS_DARWIN, IS_LINUX,
                                      check_env_flag,
@@ -178,7 +187,7 @@
 # see if the user passed a quiet flag to setup.py arguments and respect
 # that in our parts of the build
 EMIT_BUILD_WARNING = False
-RERUN_CMAKE = False
+RERUN_CMAKE = True  # Chaquopy: for rerunning with build-wheel.py --no-unpack.
 filtered_args = []
 for i, arg in enumerate(sys.argv):
     if arg == '--cmake':
@@ -766,6 +776,7 @@
         packages=packages,
         entry_points=entry_points,
         install_requires=install_requires,
+        data_files=[("chaquopy/lib", glob.glob("torch/lib/*.so*"))],
         package_data={
             'torch': [
                 'py.typed',
@@ -743,7 +752,7 @@
                 'optim/*.pyi',
                 'autograd/*.pyi',
                 'utils/data/*.pyi',
-                'lib/*.so*',
+                # Chaquopy: moved 'lib/*.so*' to data_files.
                 'lib/*.dylib*',
                 'lib/*.dll',
                 'lib/*.lib',
--- src-original/third_party/protobuf/cmake/libprotobuf.cmake	2020-02-06 11:09:41.410715150 +0000
+++ src/third_party/protobuf/cmake/libprotobuf.cmake	2020-02-05 22:02:20.202885629 +0000
@@ -118,6 +118,10 @@
 if(protobuf_WITH_ZLIB)
     target_link_libraries(libprotobuf ${ZLIB_LIBRARIES})
 endif()
+
+# Chaquopy: used by src/google/protobuf/stubs/common.cc
+target_link_libraries(libprotobuf INTERFACE log)
+
 target_include_directories(libprotobuf PUBLIC ${protobuf_source_dir}/src)
 if(MSVC AND protobuf_BUILD_SHARED_LIBS)
   target_compile_definitions(libprotobuf
--- src-original/third_party/sleef/Configure.cmake      2020-02-07 15:45:16.973742053 +0000
+++ src/third_party/sleef/Configure.cmake       2020-02-07 16:35:18.664650845 +0000
@@ -98,7 +98,7 @@
   command_arguments(ALIAS_PARAMS_ADVSIMD_SP -4 float32x4_t int32x4_t n advsimd)
 elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "arm")
   set(SLEEF_ARCH_AARCH32 ON CACHE INTERNAL "True for Aarch32 architecture.")
-  set(COMPILER_SUPPORTS_NEON32 1)
+  # set(COMPILER_SUPPORTS_NEON32 1)  # Chaquopy: see chaquopy-openblas/build.sh.
 
   set(SLEEF_HEADER_LIST
     NEON32_
--- src-original/tools/build_pytorch_libs.py	2020-02-07 15:43:51.146115289 +0000
+++ src/tools/build_pytorch_libs.py	2020-02-07 16:10:31.079190433 +0000
@@ -139,10 +139,18 @@
         else:
             cmake_args.append('-GVisual Studio 15 2017')
     try:
+        # Chaquopy
+        import os.path
+        import sys
+        sys.path.insert(0, os.path.abspath("../requirements"))
+        import builtins
+        builtins.__NUMPY_SETUP__ = True  # Prevent NumPy runtime from being imported.
+
         import numpy as np
         NUMPY_INCLUDE_DIR = np.get_include()
         USE_NUMPY = True
     except ImportError:
+        raise  # Chaquopy
         USE_NUMPY = False
         NUMPY_INCLUDE_DIR = None
 
@@ -155,11 +163,28 @@
     mkdir_p(install_dir)
     mkdir_p(build_dir)
 
+    # Chaquopy: see https://github.com/shibatch/sleef/issues/249
+    build_sleef_native = os.path.abspath("build-sleef-native")
+    if not os.path.exists(build_sleef_native):  # For rerunning with build-wheel.py --no-unpack
+        os.mkdir(build_sleef_native)
+        sleef_env = os.environ.copy()
+        for name in ["AR", "ARFLAGS", "AS", "CC", "CFLAGS", "CPP", "CPPFLAGS", "CXX",
+                     "CXXFLAGS", "F77", "F90", "FARCH", "FC", "LD", "LDFLAGS", "LDSHARED",
+                     "NM", "RANLIB", "READELF", "STRIP"]:
+            sleef_env.pop(name, None)
+        kwargs = dict(cwd=build_sleef_native, env=sleef_env)
+        check_call(["cmake", "../third_party/sleef"], **kwargs)
+        check_call(["cmake", "--build", "." , "--", "-j", str(os.cpu_count())], **kwargs)
+
     cmake_defines(
         cmake_args,
-        PYTHON_EXECUTABLE=escape_path(sys.executable),
-        PYTHON_LIBRARY=escape_path(cmake_python_library),
-        PYTHON_INCLUDE_DIR=escape_path(distutils.sysconfig.get_python_inc()),
+
+        # Chaquopy: see "CMake variables" comment in setup.py.
+        CMAKE_TOOLCHAIN_FILE=os.path.abspath("../chaquopy.toolchain.cmake"),
+        CAFFE2_CUSTOM_PROTOC_EXECUTABLE=which("protoc"),
+        ONNX_CUSTOM_PROTOC_EXECUTABLE=which("protoc"),
+        NATIVE_BUILD_DIR=build_sleef_native,
+
         BUILDING_WITH_TORCH_LIBS=os.getenv("BUILDING_WITH_TORCH_LIBS", "ON"),
         TORCH_BUILD_VERSION=version,
         CMAKE_BUILD_TYPE=build_type,
@@ -201,7 +226,7 @@
         CMAKE_SHARED_LINKER_FLAGS=ldflags,
         THD_SO_VERSION="1",
         CMAKE_PREFIX_PATH=os.getenv('CMAKE_PREFIX_PATH') or distutils.sysconfig.get_python_lib(),
-        BLAS=os.getenv('BLAS'),
+        BLAS="OpenBLAS",  # Chaquopy: was os.getenv('BLAS'),
         CUDA_NVCC_EXECUTABLE=escape_path(os.getenv('CUDA_NVCC_EXECUTABLE')),
         USE_REDIS=os.getenv('USE_REDIS'),
         USE_GLOG=os.getenv('USE_GLOG'),
--- src-original/torch/csrc/autograd/python_engine.cpp	2020-02-07 15:43:51.162115219 +0000
+++ src/torch/csrc/autograd/python_engine.cpp	2020-02-07 18:51:45.122743059 +0000
@@ -271,7 +271,8 @@
 
 bool THPEngine_initModule(PyObject *module)
 {
-#ifndef _WIN32
+// Chaquopy: added __ANDROID__
+#if !(defined(_WIN32) || defined(__ANDROID__))
   if (pthread_atfork(nullptr, nullptr, child_atfork) != 0) {
     throw std::runtime_error("unable to set pthread_atfork handler");
   }
--- src-original/torch/csrc/distributed/c10d/init.cpp	2020-02-07 15:43:51.162115219 +0000
+++ src/torch/csrc/distributed/c10d/init.cpp	2020-02-07 18:59:38.964744032 +0000
@@ -423,7 +423,10 @@
               // Use the hostname to resolve the network address to
               // use. Note: if the hostname does not resolve to an address (e.g.
               // because of misconfigured /etc/hosts file), this will not work.
-              std::array<char, HOST_NAME_MAX> hostname{};
+
+              // Chaquopy: added _POSIX prefix.
+              std::array<char, _POSIX_HOST_NAME_MAX> hostname{};
+
               auto rv = gethostname(hostname.data(), hostname.size());
               if (rv != 0) {
                 throw std::system_error(errno, std::system_category());
--- src-original/torch/csrc/jit/fuser/cpu/temp_file.h   2020-02-07 15:43:51.166115201 +0000
+++ src/torch/csrc/jit/fuser/cpu/temp_file.h    2020-02-07 18:36:26.562369681 +0000
@@ -21,8 +21,13 @@
   TempFile(const std::string& t, int suffix) {
     // mkstemps edits its first argument in places
     // so we make a copy of the string here, including null terminator
-    std::vector<char> tt(t.c_str(), t.c_str() + t.size() + 1);
-    int fd = mkstemps(tt.data(), suffix);
+
+    // Chaquopy: mkstemps isn't available with Crystax, so omit the suffix and use mkstemp
+    // instead.
+    std::vector<char> tt(t.c_str(), t.c_str() + t.size() - suffix + 1);
+    tt.back() = '\0';
+    int fd = mkstemp(tt.data());
+
     AT_ASSERT(fd != -1);
     file_ = fdopen(fd, "r+");
 
--- src-original/torch/lib/libshm/manager.cpp	2020-02-06 11:08:10.815118599 +0000
+++ src/torch/lib/libshm/manager.cpp	2020-02-05 20:54:45.104188146 +0000
@@ -63,7 +63,7 @@
 }
 
 bool object_exists(const char *name) {
-  int fd = shm_open(name, O_RDONLY, 0);
+  int fd = -1;   // Chaquopy: removed shm_open, which isn't supported on Android.
   if (fd >= 0) {
     close(fd);
     return true;
@@ -160,7 +160,7 @@
 
   for (auto &obj_name: used_objects) {
     DEBUG("freeing %s", obj_name.c_str());
-    shm_unlink(obj_name.c_str());
+    // Chaquopy: removed shm_unlink, which isn't supported on Android.
   }
 
   DEBUG("manager done");
--- src-original/torch/lib/THD/base/init_methods/InitMethodUtils.cpp	2020-02-07 15:43:51.190115097 +0000
+++ src/torch/lib/THD/base/init_methods/InitMethodUtils.cpp	2020-02-07 18:46:59.215894151 +0000
@@ -1,6 +1,6 @@
 #include <THD/base/init_methods/InitMethodUtils.hpp>
 
-#include <ifaddrs.h>
+// Chaquopy: <ifaddrs.h> is missing on Crystax.
 #include <net/if.h>
 #include <sys/ioctl.h>
 #include <sys/types.h>
@@ -28,12 +28,15 @@
 } // namespace
 
 std::vector<std::string> getInterfaceAddresses() {
+  /* Chaquopy: getifaddrs requires API level 24.
   struct ifaddrs* ifa;
   SYSCHECK(getifaddrs(&ifa));
   ResourceGuard ifaddrs_guard([ifa]() { ::freeifaddrs(ifa); });
+  * Chaquopy: END disabled code */
 
   std::vector<std::string> addresses;
 
+  /* Chaquopy: getifaddrs requires API level 24.
   while (ifa != nullptr) {
     struct sockaddr* addr = ifa->ifa_addr;
     if (addr) {
@@ -45,6 +48,7 @@
     }
     ifa = ifa->ifa_next;
   }
+  * Chaquopy: END disabled code */
 
   return addresses;
 }
