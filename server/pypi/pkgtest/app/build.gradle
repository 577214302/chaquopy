apply plugin: 'com.android.application'

apply plugin: 'com.chaquo.python'
import com.chaquo.python.Common


// Extra dependencies required to run the tests.
def TEST_PACKAGES = [
    "grpcio": ["protobuf", "futures; python_version < '3.2'"],
    "spacy": ["https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-2.0.0/en_core_web_sm-2.0.0.tar.gz"],
]


android {
    compileSdkVersion 26
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 26

        // Final digit of versionCode is 0 for -SNAPSHOT builds in this repo, and 1 for released
        // builds in the public repo.
        versionName rootProject.version + "-SNAPSHOT"
        def verParsed = rootProject.version.split(/\./).collect { Integer.parseInt(it) }
        versionCode ((verParsed[0] * 1000000) + (verParsed[1] * 1000) + (verParsed[2] * 10) + 0)

        // To test only some packages, replace `null` with a list.
        def PACKAGES = null
        addPackages(delegate, include: PACKAGES)
        python {
            pip {
                // After a package is tested, remember to move it to the public repository!
                options "--extra-index-url", "https://chaquo.com/pypi-test/"
                TEST_PACKAGES.each { name, extras ->
                    if (PACKAGES == null || name in PACKAGES) {
                        extras.each { install it }
                    }
                }
            }
        }

        ndk {
            abiFilters Common.ABIS.toArray()
        }
    }

    flavorDimensions "pyVersion"
    productFlavors {
        // Allow temporary single-version testing just by editing Common.java.
        if (Common.PYTHON_VERSIONS.contains("2.7.15")) {
            // Using words rather than numbers so that "three" comes first alphabetically and is
            // therefore the default (https://issuetracker.google.com/issues/36988145).
            two {
                dimension "pyVersion"
                applicationId "com.chaquo.python.pkgtest2"
                python { version "2.7.15" }
            }
        }
        if (Common.PYTHON_VERSIONS.contains("3.6.5")) {
            three {
                dimension "pyVersion"
                applicationId "com.chaquo.python.pkgtest3"
                python { version "3.6.5" }
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        def demoSrc = "../../../../demo/app/src"
        main {
            java {
                srcDirs = ["$demoSrc/main/java"]
                includes = ["**/App.java", "**/MainActivity.java",
                            "**/PythonTestActivity.java", "**/ReplActivity.java",
                            "com/chaquo/python/utils/**"]
            }
            python { srcDir "$demoSrc/main/python" }
            res { srcDirs = ["$demoSrc/main/res"] }
        }
    }
}


def addPackages(Map kwargs, flavor) {
    def inputDir = "../../packages"
    List packages = kwargs.getOrDefault("include", null)
    if (packages == null) {
        packages = []
        for (f in file(inputDir).listFiles()) {
            if (f.isDirectory()) {
                packages.add(f.name)
            }
        }
    }
    List exclude = kwargs.getOrDefault("exclude", [])
    packages.removeIf({ exclude.contains(it) })

    def outputDir = "src/$flavor.name/python/chaquopy/test"
    delete(outputDir)
    mkdir(outputDir)
    String suiteSrc = ""
    for (pkgName in packages) {
        flavor.python.pip.install pkgName
        def testPaths = ["test.py", "test"].collect { file("$inputDir/$pkgName/$it") }
        for (testPath in testPaths) {
            if (testPath.exists()) {
                def pkgModule = pkgName.replace('-', '_')
                copy {
                    from testPath.parentFile
                    include "${testPath.name}/**"
                    into outputDir
                }
                file("$outputDir/$testPath.name").renameTo(
                    file("$outputDir/${testPath.name.replace('test', pkgModule)}"))
                suiteSrc += "from .${pkgModule} import *\n"
                break
            }
        }
    }
    file("$outputDir/__init__.py").text = suiteSrc
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "android.arch.lifecycle:extensions:1.1.0"
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:preference-v14:26.1.0'
    testImplementation 'junit:junit:4.12'
}
