apply plugin: 'com.android.application'

apply plugin: 'com.chaquo.python'
import com.chaquo.python.Common


// Packages known to work on this branch (see build-***REMOVED***.sh).
ext.DEFAULT_INCLUDE_PACKAGES = [
    "markupsafe", "chaquopy-libcxx", "murmurhash", "chaquopy-libgfortran", "chaquopy-openblas",
    "numpy", "scipy", "pandas", "chaquopy-libzmq", "pyzmq", "kiwisolver", "chaquopy-freetype",
    "chaquopy-libjpeg", "chaquopy-libpng", "pillow", "matplotlib", "opencv-python",
    "chaquopy-hdf5", "h5py", "grpcio", "tensorflow"
]

// Packages not to include in regular pre-release testing because they're very large and not
// that popular.
ext.DEFAULT_EXCLUDE_PACKAGES = [
    "obspy",
    "spacy",  // Also requires `extractPackages "en_core_web_sm"`
]

// Extra dependencies required to run the tests. Each entry is a pip requirement specifier.
ext.TEST_PACKAGES = [
    "grpcio": ["protobuf"],
    "spacy": ["https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-2.0.0/en_core_web_sm-2.0.0.tar.gz"],
]


android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 28

        applicationId "com.chaquo.python.pkgtest3"

        // Final digit of versionCode is 0 for -SNAPSHOT builds in this repo, and 1 for released
        // builds in the public repo.
        versionName rootProject.version + "-SNAPSHOT"
        def verParsed = rootProject.version.split(/\./).collect { Integer.parseInt(it) }
        versionCode ((verParsed[0] * 1000000) + (verParsed[1] * 1000) + (verParsed[2] * 10) + 0)

        addPackages(delegate, include: DEFAULT_INCLUDE_PACKAGES)
        python {
            pip {
                options "--index-url", "https://pypi.org/simple"  // Disable chaquo.com index.
                options "--extra-index-url", "../../dist"
            }
        }

        ndk {
            abiFilters Common.ABIS.toArray()
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        def demoSrc = "../../../../demo/app/src"
        main {
            java {
                srcDirs = ["$demoSrc/main/java"]
                includes = ["**/App.java", "**/MainActivity.java",
                            "**/PythonTestActivity.java", "**/ReplActivity.java",
                            "com/chaquo/python/utils/**"]
            }
            python { srcDir "$demoSrc/main/python" }
            res { srcDirs = ["$demoSrc/main/res"] }
        }
    }
}


def addPackages(Map kwargs, flavor) {
    def inputDir = "../../packages"
    List packages = kwargs.getOrDefault("include", null)
    if (packages == null) {
        packages = []
        for (f in file(inputDir).listFiles()) {
            if (f.isDirectory() && !(f.name in DEFAULT_EXCLUDE_PACKAGES)) {
                packages.add(f.name)
            }
        }
    }
    List exclude = kwargs.getOrDefault("exclude", [])
    packages.removeIf({ exclude.contains(it) })

    def outputDir = "src/$flavor.name/python/chaquopy/test"
    delete(outputDir)
    mkdir(outputDir)
    String suiteSrc = ""
    for (pkgName in packages) {
        def testPaths = ["test.py", "test"].collect { file("$inputDir/$pkgName/$it") }
        for (testPath in testPaths) {
            if (testPath.exists()) {
                flavor.python.pip {
                    install pkgName
                    TEST_PACKAGES.getOrDefault(pkgName, []).each { install it }
                }
                def pkgModule = pkgName.replace('-', '_')
                copy {
                    from testPath.parentFile
                    include "${testPath.name}/**"
                    into outputDir
                }
                file("$outputDir/$testPath.name").renameTo(
                    file("$outputDir/${testPath.name.replace('test', pkgModule)}"))
                suiteSrc += "from .${pkgModule} import *\n"
                break
            }
        }
    }
    file("$outputDir/__init__.py").text = suiteSrc
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "android.arch.lifecycle:extensions:1.1.0"
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:preference-v14:28.0.0'
    testImplementation 'junit:junit:4.12'
}
